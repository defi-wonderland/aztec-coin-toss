{
  "name": "CoinToss",
  "functions": [
    {
      "name": "_create_bet_escrow",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "sender",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "house_escrow",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "settle_escrow_nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "divinity",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "private_oracle",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "house",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "bet_amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+Xdh5MTVRwH8M1dNuFUEES9ChxHhwN2k81lg6gn2Atib6hcvESxcIhnQVERe8euYEEs9N77f8bw+868wCMcDDP5HcPjuzO/2SN3bN7nbbL9/X7HPc/b4J2eEmbebeZBbVPoyzL8AZabDbqiqJTPlMJs2BNkCsU4F0S5YlccxmEuzvVm4my2FEdxvlAs5INCGGVLYTlXyJbNgn29NgaD4U7JMlKD4E5d4u60LCM9CO60svtcn/da29mm2M6E6ct2s7xGiRMSTWbebOYtZt5q5m2X6bxTYpRZZ+iX4aZfRl0C7RrtnTlpf67GeHrf0Ur/Vdo4xjiwbWm3+tc3v7/Qzx2msdb/r6ta/ljr7zok6k2ca+pW9Pre+ddPUNsUNnr62yftNjY50MZmB9rY4kAbW72Ls78MapvCDk93f1mZxkmMND83eGdvZ/BassqE7Z+v7Gswy8VUZ72Pp/s+uYGONYMapwarzfUD9GVygL70rdf8Ki/+PdT6vVfVL8PM36aU10HCal9lucmqtg2RGGF+XtzXv6i8bO7SUk9/qXdeX3/J/mClqjrEBiSs1+0djt0p6arl2J2ctub2e55qtUZv2MvU/jaP89w4Sh+v085ylInOaGedcn8mFM0TBmndaJvrFM0THTHXK5onOWJOKponO2L2Fc1THDGnFM1THTGnFc3THDGPVjR3OmJuUzRPJzTPIDTPJDQHhOaQ0JwhNGcJzRGhOUdo7iI05wnNMaG5QGieRWi+gdA8m9B8I6H5JkLzzYTmbkLzLYTmOYTmuYTmWwnNtxGabyc030FovpPQfBeh+W5C8z2E5nsJzfcRmucRmu8nNM8nND9AaH6Q0PwQoflhQvMjhOZHCc2PEZofJzQ/QWh+ktD8FKF5AaH5aULzM4TmZwnNCwnNPYTmIqH5OUJzL6G5RGguE5qfJzS/QGheRGh+kdD8EqH5ZULzK4TmxYTmPkLzEkfMHYrmVwnX81JC82uE5n5C8+uE5jcIzW8Smt8iNC8jNL9NaH6H0Lyc0Pwuofk9QvP7hOYVjpjbFc0fEK7nlYTmDwnNHxGaPyY0f0Jo/pTQ/Bmh+XNC8xeE5i8JzV8Rmr8mNH9DaP6W0LzKEfN4RfN3hOv5e0LzD4TmHwnNPxGafyY0/0Jo/pXQ/BuheTWheQ2h+XdC8x+E5j8JzX8RmtcSmv8mNK8jNP9DaP6X0Pwfofl/QvN6QvMGQvNGQvMmQvNmQvMWQvNWQvM2QvN2QvMOR8xDFM07HTE3KJp3OWK+QtG82xHzlYrmPY6Yr1I073XEPFTRvM8R8zBF835HzFcrmg84Yh6uaD7oiHmEovmQI+ZrFM2HHTGPVDQfccR8raL5qCPm6xTNxxwxX69oPq5objXLSRhzvURSwpdISaQlcE6IcyScM+AYGseUOMbCMQf2wdgnYRuNbRa+w/hMYx3D3CjRJNEs0SLRavXxGjOfIDFRYpLEZIkpElMlpkl0SkyXmCExE16JUCKDfpSIJHISXRJ5iViiIDFLAnXvZ0ugLjrqhFfqZqOu8hwJ1N1FHVrUZUWdUtTtRB1L1HVEnUPU/UMdPNSFQ5001A2bL4G6UqizhLpDqMODujSo04K6JajjgboWqPOAugcLJJAXH3nikTd9oQTyahclkHcZeYiRlxd5apG3FXlMkdcTeS6R9xF5EJEXEHnykDduiQTyiiHPFvJOIQ8T8hIhTw/y1iCPC/KaIM8H8l4sl0BeBOQJwLj5FRIYV71SAuNuMQ4V4zIxThHj9jCODeO6MM4J434wDgbjQjBOAuMGVknguXI8Z43njvEcLp5LxXOaeG4Rz/HhubbVZv3iOSA8F4PnRPDcxFoJ3FdfJ4H7rrgPiftyuE+F+za4j4Hr+rjOjeu+uA6K64K4TobrRriOgusKOM/GeSfOw3BeguN0HLfiOA7HNdjPY7+H/QC2i9hO4HtTmU4C4ACFXfalAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_bet",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        },
        {
          "name": "user_transfer_nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "house_escrow",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "settle_escrow_nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_config_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::config_note::ConfigNote",
          "fields": [
            {
              "name": "divinity",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "private_oracle",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "house",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "token",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "bet_amount",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_results_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::result_note::ResultNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "bet_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "result",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_user_bets_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::bet_note::BetNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "bet_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "bet",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "oracle_callback",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "answer",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "data",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "settle_bet",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "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tsKxZMKxZMKxZMKxZPLAtK1wLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlwLJlyLJlyLJlyLJlyLJk+MG2rHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEumHEtmHEtmHEtmHEtmHEtmD0zbGseSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceSGceS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",
      "",
      "",
      "eJzN3duOILl2nOF3mesNo9aBi6RexfCF4ANgQJANS3fCfnfTwK6a2TCpZP+Vqokry0CHMtUdyZn5MqP63377p//1X//xX//n//rnf/ntH/7tt4//NH/7h//8b7/9y//+x3/+f///f/nXf/w///rbP3z85bf//s//bf2/f/3Lb//jf/7Tf//tH+yvf/n/fpVnNvvbr1z/c7WvXz1z88ut989f/PH7/+KIv/6Xv6z7sA+VGzGVG3GVGwmVG0mVG2kqN1IqN9JVbmSo3IjKyeoqJ6urnKyucrK6ysnqKierq5ysrnKyusrJ6ionq6ucrKFysobKyRoqJ2uonKyhcrKGyskaKidrqJysoXKyhsrJmiona6qcrKlysqbKyZoqJ2uqnKypcrKmysmaKidrqpysTeVkbSona1M5WZvKydpUTtamcrI2lZO1qZysTeVkbSona6mcrKVyspbKyVoqJ2upnKylcrKWyslaKidrqZyspXKydpWTtaucrF3lZO0qJ2tXOVm7ysnaVU7WrnKydpWTtaucrEPlZB0qJ+tQOVmHysk6VE7WoXKyDpWTdaicrEPlZB0qJ+tUOVmnysk6VU7WqXKyTpWTdaqcrFPlZJ0qJ+tUOVmnyslqHypHq32onK32oXK42ofK6WofKserfaicr/ahcsDah8oJax8qR6x9yJyxQnMsmTNWZ5Cls8jSmWTpbLJ0Rlk6qyydWZbMLstkhlkms8wymWmWyWyzTGacZTLrLJOZZ5nMPstkBloms9AymYmWyWy0TGakZTIrLZOZaZnMTstkhloms9QymamWyWy1TGasZTJrLZOZa5nMXstkBlsms9gymcmWyWy2TGa0ZTKrLZOZbZnMbstkhlsms9wymemWyWy3TGa8ZTLrLZOZb5nMfstkBlwms+AymQmXyWy4TGbEZTIrLpOZcZnMjstkhlwms+QymSmXyWy5TGbMZTJrLpOZc5nMnstkBl0ms+gymUmXyWy6TGbUZTKrLpOZdZnMrstkhl0ms+wymWmXyWy7TGbcZTLrLpOZd5nMvstkBl4ms/AymYmXyWy8TGbkZTIrL5OZeZnMzstldl4us/NymZ2Xy+y8/EPljHWZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2XiGz8wqZnVfI7LxCZucVHypnbMjsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzSpmdV8rsvFJm55UyO6/8UDljU2bnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xk9l5NZmdV5PZeTWZnVf7UDljm8zOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6rZHZeJbPzKpmdV8nsvOpD5YwtmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl4ls/MqmZ1Xyey8SmbnVTI7r5LZeZXMzqtkdl5dZufVZXZeXWbn1WV2Xv1D5YztMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6t/ceY3xdSftw793J987Y9+8k++dsW/eyffO2Dfv5Htn7It38s2d15t38r0z9s07+d4Z++adfO+MffNOvnfGvnknMmfsN3deb96JzBn7zZ3Xm3cic8Z+c+f15p3InLHf3Hm9eScyZ+w3d15v3onMGfvNndebdyJzxn5z5/Xmncicsd/ceb15JzJn7Dd3Xm/eicwZ+82d15t3InPGfnPn9eadyJyx39x5vXknMmfsN3deb96JzBn7zZ3Xm3cic8Z+c+f15p3InLHf3Hm9eScyZ+w3d15v3onKGTu+ufN6805UztjxzZ3Xm3eicsaOD5Uzdnxz5/XmnaicseObO68370TljB3f3Hm9eCff3Hm9eScyZ+w3d15v3onMGfvNndebdyJzxn5z5/Xmncicsd/ceb15JzJn7Dd3Xm/eicwZ+82d15t3InPGfnPn9eadyJyx39x5vXknMmfsN3deb96JzBn7zZ3Xm3cic8Z+c+f15p3InLHf3Hm9eScyZ+w3d15v3onMGfvNndebdyJzxn5z5/Xmncicsd/ceb15JzJn7Dd3Xm/eicwZ+82d15t3InPGfnPn9eadyJyx39x5vXknMmfsN3deb96JzBn7zZ3Xm3cic8bK7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryuy8pszOa8rsvKbMzmt+qJyxU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZudlHzJDr3UrKqfsuhWVY3bdiso5u25F5aBdt6Jy0q5bUTlq162onLXrVlQO23UrOqetzORr3YrOaSsz+lq3onPaysy+1q3onLYyw691Kzqnrcz0a92KzmkrM/5at6Jz2srMv9at6Jy2MgOwdSs6p63MBGzdis5pKzMCW7eic9rKzMDWreictjJDsHUrOqetzBRs3YrOaSszBlu3onPayszB1q3onLYyg7B1KzqnrcwkbN2KzmkrMwpbt6Jz2srMwtat6Jy2MsOwdSs6p63MNGzdis5pKzMOW7eic9rKzMPWreictjIDsXUrOqetzERs3YrOaSszElu3onPayszE1q3onLYyQ7F1KzqnrcxUbN2KzmkrMxZbt6Jz2srMxdat6Jy2MoOxdSs6p63MZGzdis5pKzMaW7eic9rKzMbWreictjLDsXUrOqetzHRs3YrOaSszHlu3onPayszH1q3onLYyA7J1KzqnrcyEbN2KzmkrMyJbt6Jz2srMyNat6Jy2MkOydSs6p63MlGzdisxpazpbMtPZkpnOlsx0tmT2IXPams6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy09mSmc6WzHS2ZKazJTOdLZnpbMlMZ0tmOlsy19mSuc6WzHW2ZK6zJfMPmdPWdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZK5zpbMdbZkrrMlc50tmetsyVxnS+Y6WzLX2ZKFzpYsdLZkobMlC50tWXzInLahsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix0tmShsyULnS1Z6GzJQmdLFjpbstDZkoXOlix1tmSpsyVLnS1Z6mzJ8kPmtE2dLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6WLHW2ZKmzJUudLVnqbMlSZ0uWOluy1NmSpc6W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UEMOashBDTmoIQc15KCGHNSQgxpyUEMOashBDTmoIQc15KCGHNSQgxpyUEMOashBDTmoIQc15KCGHNSQgxpyUEMOashBDTmoIQc15KCGHNSQgxpyUEMOashBDTmoIQc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNOashJDTmpISc15KSGnNSQkxpyUkNu1JAbNeRGDblRQ27UkBs15EYNuVFDbtSQGzXkRg25UUNu1JAbNeRGDblRQ27UkBs15EYNuVFDbtSQGzXkRg25UUNu1JAbNeRGDblRQ27UkBs15EYNuVFDbtSQGzXkRg25UUNu1JAbNeRGDblRQ27UkBs15EYNuVFDbtSQGzXkRg25UUNu1JAbNeRGDblRQ27UkBs15EYNuVFDbtSQGzXkRg25UUNu1JAbNeRGDblRQ27UkBs15EYNuVFDbtSQGzXkRg25UUNu1JAbNeRGDblRQ27UkBs15EYNuVFDbtSQGzXkRg25UUNu1JAbNeRGDblRQ27UkBs15EYNuVFDbtSQGzXkRg25UUNu1JAbNeRGDblRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkooZc1JCLGnJRQy5qyEUNuaghFzXkTg25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",
      "",
      "eJzlWMtuGzEM/Jc9G4ZIipLoXyl6MNoECBA4Re2b4X/vrmPKSsxdYbex48cpCTCzGIyG1ETb5vXt13Lz8rZaN4ttQ83ix7ZZ/1muur/Wm+XfTbNws+Zp9bv9uZs1zy+vT80CdrMTFHgK4YBsf08powUtOCOAwhlDBS4xKtghH7G8+zlr/E2q5guqJs9ZtXf8H6qDpdqn6A8Unwo10DHiaEYazZDRDHDjKTCeguMp5gwOU8wBGKaY6RummEfPDpTCLvBwbJFSTq0rPu+dgY6iw5AoHLEuGlhOeMCGIt0A3sAisX4YKfojmrln1FRzcFBBR69mxIQZ6/f2mXNwHfYFyPYFrNmXtwNhsaXA0jC4ScAc80c2xNxi5zNEvMtiOhcKR1o1aC7Iy6gBPFFj7t7zqWmPmhQNCStxwSB6rhgx1FZKiqLfFqAKutWqKzkU8ULa22LeL49gC4v2sOD5gy2GDqfTjCLHobOggwOK5tX8CG4HVtkhxZMQmvXjRm0R1G+jE6ygMV8pFKXQgXtbzIrFLmoVZ8D4hbbcWV/Cnrp5DfZ9Sz3AngJ5LkMq9aCnvV1CjVEPeqrTudRcz2YerAfU0+Hu35bvqAfU01Hv3+3BekA9HfUmbfm6egAyt596OAsKUEy0Z2XZdavGsh988mXNJYvc+/9cc/PKwaSnQZQ+n3ZLMm+GGslc4DWS/YhXZZlzOszyc/v9hpKm2CN9PuKOZZpRZfW8Z2qcOBQDQ++sOCVOHWt8nDrWhDjJlDjJlDjJlDjJpDjJlDgRTolTxxofp441Nk673T8OT4xw",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\ncontract CoinToss {\n    use dep::aztec::context::Context;\n    use crate::types::bet_note::{BetNote, BetNoteMethods, BET_NOTE_LEN};\n    use crate::types::config_note::{ConfigNote, ConfigNoteMethods, CONFIG_NOTE_LEN};\n    use crate::types::result_note::{ResultNote, ResultNoteMethods, RESULT_NOTE_LEN};\n \n    use crate::types::token::{\n        TokenPrivateContextInterface, \n        FromTransferStruct, \n        ToTransferStruct, \n        FromEscrowStruct,\n        OwnerEscrowStruct,\n        RecipientSettleEscrowStruct,\n        OwnerSettleEscrowStruct,\n        AccountsBroadcastEscrowNoteForStruct\n    };\n\n    use dep::aztec::note::{\n        note_getter_options::NoteGetterOptions,\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        note_viewer_options::NoteViewerOptions,\n        utils as note_utils\n    };\n\n    use dep::std::option::Option;\n\n    use dep::aztec::log::emit_encrypted_log;\n    use dep::aztec::oracle::{\n        get_public_key::get_public_key,\n        rand::rand\n    };\n    use dep::aztec::state_vars::{\n        public_state::PublicState,\n        map::Map,\n        set::Set,\n        immutable_singleton::ImmutableSingleton\n    };\n    use dep::aztec::selector::compute_selector;\n    use dep::aztec::types::address::AztecAddress;\n\n    use dep::aztec::oracle::debug_log;\n\n\n    global CONFIG_NOTE_SLOT = 1;\n    global BETS_SLOT = 2;\n    global RESULT_SLOT = 3;\n\n    // TODO: add slow update tree to make the switch from private to public\n    struct Storage {\n        config: ImmutableSingleton<ConfigNote, CONFIG_NOTE_LEN>,\n        bets: Set<BetNote, BET_NOTE_LEN>,\n        results: Set<ResultNote, RESULT_NOTE_LEN>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                config: ImmutableSingleton::new(\n                    context,\n                    CONFIG_NOTE_SLOT,\n                    ConfigNoteMethods,\n                ),\n                bets: Set::new(context, BETS_SLOT, BetNoteMethods),\n                results: Set::new(context, RESULT_SLOT, ResultNoteMethods)\n            }\n        }\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    fn constructor(divinity: AztecAddress, private_oracle: AztecAddress, house: AztecAddress, token: AztecAddress, bet_amount: Field) {\n        let mut config_note = ConfigNote::new(divinity, private_oracle, house, token, bet_amount);\n        storage.config.initialize(&mut config_note, Option::none(), false);\n    }\n\n    // House shares off-chain with the user the preimage for an escrow note for the bet_amount and an authwit to consume it\n    #[aztec(private)]\n    fn create_bet(bet: bool, user_transfer_nonce: Field, house_escrow: Field, settle_escrow_nonce: Field) {\n        let sender = AztecAddress::new(context.msg_sender());\n        let config_note = storage.config.get_note();\n        let house = config_note.house;\n        let bet_amount = config_note.bet_amount;\n        let address_this = AztecAddress::new(context.this_address());\n\n        let token_contract = TokenPrivateContextInterface::at(config_note.token.address);\n\n        // We transfer private tokens from the user to the coin toss \n        let _ = token_contract.transfer(\n            &mut context,\n            FromTransferStruct { address: sender.address },\n            ToTransferStruct { address: address_this.address },\n            bet_amount,\n            user_transfer_nonce\n        );\n\n        // Check that the escrow provided has the correct amount of tokens\n        let house_escrow_note = token_contract.get_escrow(\n            &mut context,\n            house_escrow\n        )[0];\n\n        assert(house_escrow_note == bet_amount, \"Invalid escrow amount\");\n\n        let emit_escrow_selector = compute_selector(\"_create_bet_escrow((Field),Field,Field)\");\n        \n        let escrow_randomness = context.call_private_function(\n            address_this.address,\n            emit_escrow_selector,\n            [sender.address, house_escrow, settle_escrow_nonce])[0];\n        \n\n        let mut user_bet: BetNote = BetNote::new(sender, bet, escrow_randomness);\n        storage.bets.insert(&mut user_bet, true);\n\n        emit_encrypted_log(\n            &mut context,\n            address_this.address,\n            BETS_SLOT,\n            get_public_key(config_note.house.address),\n            user_bet.serialize(),\n        );\n    }\n\n    // Callback triggered on submit_answer in the oracle (add the result to both the user and the house).\n    // data[0]: user address\n    // data[1]: bet_id (the randomness generated when creating the bet note)\n    // data[2]: house address\n    // data[2:5]: unused\n    #[aztec(private)]\n    fn oracle_callback(answer: Field, data: [Field; 5]) {\n        let sender = AztecAddress::new(context.msg_sender());\n\n        let mut result_note_user = ResultNote::new(AztecAddress::new(data[0]), sender, data[1], answer as bool);\n        let mut result_note_house = ResultNote::new(AztecAddress::new(data[2]), sender, data[1], answer as bool);\n\n        storage.results.insert(&mut result_note_user, true);\n        storage.results.insert(&mut result_note_house, true);\n    }\n\n    #[aztec(private)]\n    fn settle_bet(bet_id: Field) {\n        let config_note = storage.config.get_note();\n\n        let house = config_note.house;\n        let token = config_note.token;\n        let oracle = config_note.private_oracle;\n        \n        let address_this = AztecAddress::new(context.this_address());\n        \n        let bets = storage.bets;\n\n        let options = NoteGetterOptions::new().select(1, bet_id).set_limit(1);\n        let bet_notes = bets.get_notes(options);\n        \n        if(bet_notes[0].is_some()) {\n            let note = bet_notes[0].unwrap_unchecked();\n\n            // Filter by bet_id and result sender (which must be the oracle)\n            let result_getter_option = NoteGetterOptions::new().select(2, bet_id).select(1, oracle.address).set_limit(1);\n            let result_note = storage.results.get_notes(result_getter_option)[0];\n\n            assert(result_note.is_some(), \"Invalid bet result (not settled yet or wrong oracle)\");\n\n            let result = result_note.unwrap_unchecked().result;\n\n            // Send the bet amount to the winner\n            let receiver = if(result == note.bet) { note.owner } else { house };\n\n            let _ = TokenPrivateContextInterface::at(token.address).settle_escrow(\n                &mut context,\n                OwnerSettleEscrowStruct { address: address_this.address },\n                RecipientSettleEscrowStruct { address: receiver.address }, \n                bet_id,\n                0\n            );\n\n            // Nullify the bet note\n            bets.remove(note);\n        } else {\n            assert(false, \"Bet not found\");\n        }\n    }\n\n    #[aztec(private)]\n    #[internal]\n    fn _create_bet_escrow(\n        sender: AztecAddress,\n        house_escrow: Field,\n        settle_escrow_nonce: Field\n    ) -> Field {\n        let address_this = AztecAddress::new(context.this_address());\n        let config_note = storage.config.get_note();\n\n        let token_contract = TokenPrivateContextInterface::at(config_note.token.address);\n\n        // We consume the escrow from the house\n        let __ = token_contract.settle_escrow(\n            &mut context,\n            OwnerSettleEscrowStruct { address: config_note.house.address },\n            RecipientSettleEscrowStruct { address: address_this.address }, \n            house_escrow,\n            settle_escrow_nonce\n        );\n\n        // Create a combined escrow with both amounts\n        let escrow_randomness = token_contract.escrow(\n            &mut context,\n            FromEscrowStruct { address: address_this.address },\n            OwnerEscrowStruct { address: address_this.address },\n            config_note.bet_amount * 2,\n            0\n        )[0];\n\n        // Share with the user and the house\n         let _ = token_contract.broadcast_escrow_note_for(\n             &mut context,\n             [\n                 AccountsBroadcastEscrowNoteForStruct { address: sender.address },\n                 AccountsBroadcastEscrowNoteForStruct { address: config_note.house.address },\n                 AccountsBroadcastEscrowNoteForStruct { address: 0 },\n                 AccountsBroadcastEscrowNoteForStruct { address: 0 }\n             ],\n             escrow_randomness\n        );\n        \n        escrow_randomness\n    }\n\n    // Returns the divinity address\n    unconstrained fn get_config_unconstrained() -> ConfigNote {\n        storage.config.view_note()\n    }\n\n    unconstrained fn get_user_bets_unconstrained(user: AztecAddress, start_offset: u32) -> [Option<BetNote>; 10] {\n        let user_bets_getter_option = NoteViewerOptions::new().select(0, user.address).set_offset(start_offset);\n        storage.bets.view_notes(user_bets_getter_option)\n    }\n\n    unconstrained fn get_results_unconstrained(owner: AztecAddress, start_offset: u32) -> [Option<ResultNote>; 10] {\n        let results_getter_option = NoteViewerOptions::new().select(0, owner.address).set_offset(start_offset);\n        storage.results.view_notes(results_getter_option)\n    }\n\n    // Computes note hash and nullifier.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; CONFIG_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n\n        if(storage_slot == BETS_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(BetNoteMethods, note_header, preimage)\n        } else if(storage_slot == RESULT_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(ResultNoteMethods, note_header, preimage)\n        } else {\n            note_utils::compute_note_hash_and_nullifier(ConfigNoteMethods, note_header, preimage)\n        }\n    }\n}",
        "path": "/Users/drgorilla/Documents/solidity/defiSucks/noir-wonderland/aztec-coin-toss/src/main.nr"
      },
      "4": {
        "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n",
        "path": "std/hash.nr"
      },
      "33": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "75": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "92": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "93": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "95": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "102": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "107": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "108": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "110": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "114": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "116": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "117": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "123": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "130": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "132": {
        "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
        "path": "/aztec/oracle/logs.nr"
      },
      "133": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "137": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "140": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse dep::protocol_types::constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "141": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "145": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "151": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
        "path": "/aztec/utils.nr"
      },
      "153": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress,\n    }\n};\n\nstruct BetNote {\n    owner: AztecAddress,\n    bet_id: Field,\n    bet: bool, // Heads is 0 (False). Tails is 1 (True).\n    header: NoteHeader\n}\n\nglobal BET_NOTE_LEN: Field = 3;\n\nimpl BetNote {\n    pub fn new(_owner: AztecAddress, _bet: bool, _bet_id: Field) -> Self {\n        BetNote {\n            owner: _owner,\n            bet_id: _bet_id,\n            bet: _bet,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; BET_NOTE_LEN] {\n        [self.owner.address, self.bet_id, self.bet as Field]\n    }\n\n    fn deserialize(preimage: [Field; BET_NOTE_LEN]) -> Self {\n        BetNote {\n            owner: AztecAddress::new(preimage[0]),\n            bet_id: preimage[1],\n            bet: preimage[2] as bool,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.bet_id,\n            self.bet as Field\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(BetNoteMethods, self);\n        let nullifier_key = self.bet_id;\n\n        dep::std::hash::pedersen_hash([\n            note_hash_for_nullify,\n            nullifier_key,\n        ])\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; BET_NOTE_LEN]) -> BetNote {\n    BetNote::deserialize(preimage)\n}\n\nfn serialize(note: BetNote) -> [Field; BET_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BetNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BetNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BetNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BetNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BetNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BetNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/drgorilla/Documents/solidity/defiSucks/noir-wonderland/aztec-coin-toss/src/types/bet_note.nr"
      },
      "154": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n\n    context::PrivateContext,\n    types::{\n        address::AztecAddress\n    }\n};\n\nstruct ConfigNote {\n    divinity: AztecAddress,\n    private_oracle: AztecAddress,\n    house: AztecAddress,\n    token: AztecAddress,\n    bet_amount: Field,\n    header: NoteHeader\n}\n\nglobal CONFIG_NOTE_LEN: Field = 5;\n\nimpl ConfigNote {\n    pub fn new(_divinity: AztecAddress, _private_oracle: AztecAddress, _house: AztecAddress, _token: AztecAddress, _amount: Field) -> Self {\n        ConfigNote {\n            divinity: _divinity,\n            private_oracle: _private_oracle,\n            house: _house,\n            token: _token,\n            bet_amount: _amount,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; CONFIG_NOTE_LEN] {\n        [self.divinity.address, self.private_oracle.address, self.house.address, self.token.address, self.bet_amount]\n    }\n\n    fn deserialize(preimage: [Field; CONFIG_NOTE_LEN]) -> Self {\n        ConfigNote {\n            divinity: AztecAddress::new(preimage[0]),\n            private_oracle: AztecAddress::new(preimage[1]),\n            house: AztecAddress::new(preimage[2]),\n            token: AztecAddress::new(preimage[3]),\n            bet_amount: preimage[4],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.divinity.address,\n            self.private_oracle.address,\n            self.house.address,\n            self.token.address,\n            self.bet_amount\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n         let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n         0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        // no owner == no broadcast\n        let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n        let __ = context;\n        let ___ = slot;\n    }\n}\n\nfn deserialize(preimage: [Field; CONFIG_NOTE_LEN]) -> ConfigNote {\n    ConfigNote::deserialize(preimage)\n}\n\nfn serialize(note: ConfigNote) -> [Field; CONFIG_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ConfigNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ConfigNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ConfigNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ConfigNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ConfigNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ConfigNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/drgorilla/Documents/solidity/defiSucks/noir-wonderland/aztec-coin-toss/src/types/config_note.nr"
      },
      "155": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress,\n    }\n};\n\nstruct ResultNote {\n    owner: AztecAddress,\n    sender: AztecAddress,\n    bet_id: Field,\n    result: bool, // Heads is 0 (False). Tails is 1 (True).\n    header: NoteHeader\n}\n\nglobal RESULT_NOTE_LEN: Field = 4;\n\nimpl ResultNote {\n    pub fn new(_owner: AztecAddress, _sender: AztecAddress, _bet_id: Field, _result: bool) -> Self {\n        ResultNote {\n            owner: _owner,\n            sender: _sender,\n            bet_id: _bet_id,\n            result: _result,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; RESULT_NOTE_LEN] {\n        [self.owner.address, self.sender.address, self.bet_id, self.result as Field]\n    }\n\n    fn deserialize(preimage: [Field; RESULT_NOTE_LEN]) -> Self {\n        ResultNote {\n            owner: AztecAddress::new(preimage[0]),\n            sender: AztecAddress::new(preimage[1]),\n            bet_id: preimage[2],\n            result: preimage[3] as bool,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.sender.address,\n            self.bet_id,\n            self.result as Field\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let _ = self;\n        0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; RESULT_NOTE_LEN]) -> ResultNote {\n    ResultNote::deserialize(preimage)\n}\n\nfn serialize(note: ResultNote) -> [Field; RESULT_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ResultNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ResultNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ResultNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ResultNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ResultNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ResultNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/drgorilla/Documents/solidity/defiSucks/noir-wonderland/aztec-coin-toss/src/types/result_note.nr"
      },
      "156": {
        "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\nstruct AccountsBroadcastEscrowNoteForStruct {\n  address: Field,\n}\n\nstruct FromBurnPublicStruct {\n  address: Field,\n}\n\nstruct FromEscrowStruct {\n  address: Field,\n}\n\nstruct OwnerEscrowStruct {\n  address: Field,\n}\n\nstruct ToMintPublicStruct {\n  address: Field,\n}\n\nstruct ToRedeemShieldStruct {\n  address: Field,\n}\n\nstruct NewAdminSetAdminStruct {\n  address: Field,\n}\n\nstruct MinterSetMinterStruct {\n  address: Field,\n}\n\nstruct OwnerSettleEscrowStruct {\n  address: Field,\n}\n\nstruct RecipientSettleEscrowStruct {\n  address: Field,\n}\n\nstruct FromShieldStruct {\n  address: Field,\n}\n\nstruct FromTransferStruct {\n  address: Field,\n}\n\nstruct ToTransferStruct {\n  address: Field,\n}\n\nstruct FromTransferPublicStruct {\n  address: Field,\n}\n\nstruct ToTransferPublicStruct {\n  address: Field,\n}\n\nstruct FromUnshieldStruct {\n  address: Field,\n}\n\nstruct ToUnshieldStruct {\n  address: Field,\n}\n\n\n// Interface for calling Token functions from a private context\nstruct TokenPrivateContextInterface {\n  address: Field,\n}\n\nimpl TokenPrivateContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn broadcast_escrow_note_for(\n    self,\n    context: &mut PrivateContext,\n    accounts: [AccountsBroadcastEscrowNoteForStruct;4],\n    randomness: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = accounts[0].address;\n    serialized_args[1] = accounts[1].address;\n    serialized_args[2] = accounts[2].address;\n    serialized_args[3] = accounts[3].address;\n    serialized_args[4] = randomness;\n\n    context.call_private_function(self.address, 0x2426c148, serialized_args)\n  }\n  \n\n  pub fn burn_public(\n    self,\n    context: &mut PrivateContext,\n    from: FromBurnPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_public_function(self.address, 0xb0e964d5, serialized_args)\n  }\n  \n\n  pub fn escrow(\n    self,\n    context: &mut PrivateContext,\n    from: FromEscrowStruct,\n    owner: OwnerEscrowStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = owner.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x54f7b220, serialized_args)\n  }\n  \n\n  pub fn get_escrow(\n    self,\n    context: &mut PrivateContext,\n    randomness: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = randomness;\n\n    context.call_private_function(self.address, 0x37785550, serialized_args)\n  }\n  \n\n  pub fn mint_private(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secret_hash: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x10763932, serialized_args)\n  }\n  \n\n  pub fn mint_public(\n    self,\n    context: &mut PrivateContext,\n    to: ToMintPublicStruct,\n    amount: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n\n    context.call_public_function(self.address, 0x6bfd1d5b, serialized_args)\n  }\n  \n\n  pub fn redeem_shield(\n    self,\n    context: &mut PrivateContext,\n    to: ToRedeemShieldStruct,\n    amount: Field,\n    secret: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret;\n\n    context.call_private_function(self.address, 0xb77168f2, serialized_args)\n  }\n  \n\n  pub fn set_admin(\n    self,\n    context: &mut PrivateContext,\n    new_admin: NewAdminSetAdminStruct\n  ) {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = new_admin.address;\n\n    context.call_public_function(self.address, 0x41b90896, serialized_args)\n  }\n  \n\n  pub fn set_minter(\n    self,\n    context: &mut PrivateContext,\n    minter: MinterSetMinterStruct,\n    approve: bool\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = minter.address;\n    serialized_args[1] = approve as Field;\n\n    context.call_public_function(self.address, 0x7f020b80, serialized_args)\n  }\n  \n\n  pub fn settle_escrow(\n    self,\n    context: &mut PrivateContext,\n    owner: OwnerSettleEscrowStruct,\n    recipient: RecipientSettleEscrowStruct,\n    randomness: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = owner.address;\n    serialized_args[1] = recipient.address;\n    serialized_args[2] = randomness;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x510f50d4, serialized_args)\n  }\n  \n\n  pub fn shield(\n    self,\n    context: &mut PrivateContext,\n    from: FromShieldStruct,\n    amount: Field,\n    secret_hash: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret_hash;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x1d24add0, serialized_args)\n  }\n  \n\n  pub fn transfer(\n    self,\n    context: &mut PrivateContext,\n    from: FromTransferStruct,\n    to: ToTransferStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0xb1aa668a, serialized_args)\n  }\n  \n\n  pub fn transfer_public(\n    self,\n    context: &mut PrivateContext,\n    from: FromTransferPublicStruct,\n    to: ToTransferPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x7db8f449, serialized_args)\n  }\n  \n\n  pub fn unshield(\n    self,\n    context: &mut PrivateContext,\n    from: FromUnshieldStruct,\n    to: ToUnshieldStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x78303b89, serialized_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling Token functions from a public context\nstruct TokenPublicContextInterface {\n  address: Field,\n}\n\nimpl TokenPublicContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn burn_public(\n    self,\n    context: PublicContext,\n    from: FromBurnPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_public_function(self.address, 0xb0e964d5, serialized_args)\n  }\n  \n\n  pub fn mint_private(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secret_hash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x10763932, serialized_args)\n  }\n  \n\n  pub fn mint_public(\n    self,\n    context: PublicContext,\n    to: ToMintPublicStruct,\n    amount: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n\n    context.call_public_function(self.address, 0x6bfd1d5b, serialized_args)\n  }\n  \n\n  pub fn set_admin(\n    self,\n    context: PublicContext,\n    new_admin: NewAdminSetAdminStruct\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = new_admin.address;\n\n    context.call_public_function(self.address, 0x41b90896, serialized_args)\n  }\n  \n\n  pub fn set_minter(\n    self,\n    context: PublicContext,\n    minter: MinterSetMinterStruct,\n    approve: bool\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = minter.address;\n    serialized_args[1] = approve as Field;\n\n    context.call_public_function(self.address, 0x7f020b80, serialized_args)\n  }\n  \n\n  pub fn shield(\n    self,\n    context: PublicContext,\n    from: FromShieldStruct,\n    amount: Field,\n    secret_hash: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret_hash;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x1d24add0, serialized_args)\n  }\n  \n\n  pub fn transfer_public(\n    self,\n    context: PublicContext,\n    from: FromTransferPublicStruct,\n    to: ToTransferPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x7db8f449, serialized_args)\n  }\n  \n}\n  \n  \n",
        "path": "/Users/drgorilla/Documents/solidity/defiSucks/noir-wonderland/aztec-coin-toss/src/types/token.nr"
      }
    }
  }
}