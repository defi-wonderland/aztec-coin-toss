{
  "name": "CoinToss",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "divinity",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "private_oracle",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "house",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "bet_amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+Xdh5MTVRwH8M1dNuFUEES9ChxHhwN2k81lg6gn2Atib6hcvESxcIhnQVERe8euYEEs9N77f8bw+868wCMcDDP5HcPjuzO/2SN3bN7nbbL9/X7HPc/b4J2eEmbebeZBbVPoyzL8AZabDbqiqJTPlMJs2BNkCsU4F0S5YlccxmEuzvVm4my2FEdxvlAs5INCGGVLYTlXyJbNgn29NgaD4U7JMlKD4E5d4u60LCM9CO60svtcn/da29mm2M6E6ct2s7xGiRMSTWbebOYtZt5q5m2X6bxTYpRZZ+iX4aZfRl0C7RrtnTlpf67GeHrf0Ur/Vdo4xjiwbWm3+tc3v7/Qzx2msdb/r6ta/ljr7zok6k2ca+pW9Pre+ddPUNsUNnr62yftNjY50MZmB9rY4kAbW72Ls78MapvCDk93f1mZxkmMND83eGdvZ/BassqE7Z+v7Gswy8VUZ72Pp/s+uYGONYMapwarzfUD9GVygL70rdf8Ki/+PdT6vVfVL8PM36aU10HCal9lucmqtg2RGGF+XtzXv6i8bO7SUk9/qXdeX3/J/mClqjrEBiSs1+0djt0p6arl2J2ctub2e55qtUZv2MvU/jaP89w4Sh+v085ylInOaGedcn8mFM0TBmndaJvrFM0THTHXK5onOWJOKponO2L2Fc1THDGnFM1THTGnFc3THDGPVjR3OmJuUzRPJzTPIDTPJDQHhOaQ0JwhNGcJzRGhOUdo7iI05wnNMaG5QGieRWi+gdA8m9B8I6H5JkLzzYTmbkLzLYTmOYTmuYTmWwnNtxGabyc030FovpPQfBeh+W5C8z2E5nsJzfcRmucRmu8nNM8nND9AaH6Q0PwQoflhQvMjhOZHCc2PEZofJzQ/QWh+ktD8FKF5AaH5aULzM4TmZwnNCwnNPYTmIqH5OUJzL6G5RGguE5qfJzS/QGheRGh+kdD8EqH5ZULzK4TmxYTmPkLzEkfMHYrmVwnX81JC82uE5n5C8+uE5jcIzW8Smt8iNC8jNL9NaH6H0Lyc0Pwuofk9QvP7hOYVjpjbFc0fEK7nlYTmDwnNHxGaPyY0f0Jo/pTQ/Bmh+XNC8xeE5i8JzV8Rmr8mNH9DaP6W0LzKEfN4RfN3hOv5e0LzD4TmHwnNPxGafyY0/0Jo/pXQ/BuheTWheQ2h+XdC8x+E5j8JzX8RmtcSmv8mNK8jNP9DaP6X0Pwfofl/QvN6QvMGQvNGQvMmQvNmQvMWQvNWQvM2QvN2QvMOR8xDFM07HTE3KJp3OWK+QtG82xHzlYrmPY6Yr1I073XEPFTRvM8R8zBF835HzFcrmg84Yh6uaD7oiHmEovmQI+ZrFM2HHTGPVDQfccR8raL5qCPm6xTNxxwxX69oPq5objXLSRhzvURSwpdISaQlcE6IcyScM+AYGseUOMbCMQf2wdgnYRuNbRa+w/hMYx3D3CjRJNEs0SLRavXxGjOfIDFRYpLEZIkpElMlpkl0SkyXmCExE16JUCKDfpSIJHISXRJ5iViiIDFLAnXvZ0ugLjrqhFfqZqOu8hwJ1N1FHVrUZUWdUtTtRB1L1HVEnUPU/UMdPNSFQ5001A2bL4G6UqizhLpDqMODujSo04K6JajjgboWqPOAugcLJJAXH3nikTd9oQTyahclkHcZeYiRlxd5apG3FXlMkdcTeS6R9xF5EJEXEHnykDduiQTyiiHPFvJOIQ8T8hIhTw/y1iCPC/KaIM8H8l4sl0BeBOQJwLj5FRIYV71SAuNuMQ4V4zIxThHj9jCODeO6MM4J434wDgbjQjBOAuMGVknguXI8Z43njvEcLp5LxXOaeG4Rz/HhubbVZv3iOSA8F4PnRPDcxFoJ3FdfJ4H7rrgPiftyuE+F+za4j4Hr+rjOjeu+uA6K64K4TobrRriOgusKOM/GeSfOw3BeguN0HLfiOA7HNdjPY7+H/QC2i9hO4HtTmU4C4ACFXfalAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_bet",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        },
        {
          "name": "userTransferNonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "houseEscrowRandomness",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "houseSettleEscrowNonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "user_question",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_config_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::config_note::ConfigNote",
          "fields": [
            {
              "name": "divinity",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "private_oracle",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "house",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "token",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "bet_amount",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_results_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::result_note::ResultNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "bet_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "result",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_user_bets_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::bet_note::BetNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "bet_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "bet",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "escrow_randomness",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "oracle_callback",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "answer",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "data",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "settle_bet",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzVlctqwzAQRf9Fa1NmRjN6+FdKFqZNIRCcUntn9O+xwSOrVMSUQNqsLMMZcXS5SJM5X9668XTpB9NOxpr2dTLDZ9cvf8PYfY2mhcYc+/f5mxrzcTofTYup+UEhW+dWcl6HkOlINVwIUXEht4NH7xUGko2VdGgMP6W1PNDasmRrBrnD2tWsSUhHSKK97R4dKQtUnNP6Ch1YzxlxOyVybeeb3v5JvcO93oSgKkTCO94+agODdRsLNVaCBuKKSiFyzWIuqVow0kZLjZ47nSNx7Hdoz7zCPmw785Je/L/pOczpOdpLLzfEls1D+G2bEB4bSGTIMuC/JbLY4N/ZlB1cbeAFq++fRPVxWKTPolPV92d3qnr/zxf7OiXllIV0SOkKy4Q9TA==",
      "",
      "",
      "",
      "",
      "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RF/YoVYm2m5d8IXBaWWi7dYFX1iWFhLmF96klYm2Wxd84TZamejm64IvbD/3yX/zdcEXtp/75L/5uuALbc198t98XfCFf2UhGVxgPrk60XbrggscHhcnusBycXWi7dYFFwgbrk603brggm38FxPmBXvir0603brggp3gVye6+brAfXfy1flvvi5w3/l8df6brwvcd1Vfnf/m6wL/PeQWGfjvCjcTbbcu8N+5bSXy34ttJtpuXeC/X9pMtN26wH1Ps0mY7ruU7UTbrQu223fc3Hf5Xnxf1puvC26+p7ndfE9zu/me5nbzPc3t5nuam/+eZosM/Hcpm4m2Wxdst+9Yt9t3rNvtO9bt9h3rdvuO9dhtXaDb7TvW7fYd63b7jvXm+4715vuO9eb7jvXm+4715vuO9eb7jvXm+451u33Hut2+Y91u37Fut+9Yt9t3rNvtO9bt9h3rdvuOdbt9x7rdvmPdbt+xbrfvWG++71hvvu9Yb77vWG++71hvvu9Yb77vWG++71i323es2+071u32Het2+451u33Hut2+Y91u37Fut+9Yt9t3rNvtO9bt9h3rdvuO9eb7jvXm+4715vuO9eb7jvXm+4715vuO9eb7jnW7fce63b5j3W7fsW6371i323es2+071u32Het2+451u33Hut2+Y91u37Fut+9Yb77vWG++71hvvu9Yb77vWG++71hvvu9Yb77vWLfbd6zb7TvW7fYd63b7jnW7fce63b5j3W7fsW6371i323es2+071u32Het2+4715vuO9eb7jvXm+4715vuO9eb7jvXm+4715vuOdbt9x7rdvmPdbt+x7rbvuBy77Ts+E222LjgTbbYuOBNtti44E222LjgTbbYuOBNtti44E222LjgT3XpdUI577zs+8996XXDmv/W64Mx/63XBmf/W64Iz/63XBWf+zdYFZ6LN1gVnos3WBWei7dYFu+07PhNtty7Ybd/xmWi7dcFu+47PRNutC3bbd3wm2m5dcO99x+W4977jM//N1wX33nd85r/5uuDe+47P/DdfF+y27/hMtN26YLd9x2ei7dYFu+07PhNtty7Ybd/xmWi7dcFu+47PRNutC3bbd3wm2m5dcO99x+W4977jM//N1wX33nd85r/5uuDe+47P/DdfF+y27/hMtN26YLd9x2ei7dYFu+07PhNtty7Ybd/xmWi7dcFu+47PRNutC3bbd3wm2m5dcO99x+W4977jM//N1wX33nd85r/5uuDe+47P/DdfF+y27/hMtN26YLd9x2ei7dYFu+07PhNtty7Ybd/xmWi7dcFu+47PRNutC3bbd3wm2m5dcO99x+W4977jM//N1wX33nd85r/5uuDe+47P/DdfF+y27/hMtN26YLd9x2ei3dYFtN2+Y9pu3zFtt++Yttt3TMdu6wLabt8xbbfvmLbbd0w333dMN993TDffd0w333dMN993TDffd0w333dM2+07pu32HdN2+45pu33HtN2+Y9pu3zFtt++Yttt3TNvtO6bt9h3TdvuOabt9x3Tzfcd0833HdPN9x3Tzfcd0833HdPN9x3Tzfce03b5j2m7fMW2375i223dM2+07pu32HdN2+45pu33HtN2+Y9pu3zFtt++Yttt3TDffd0w333dMN993TDffd0w333dMN993TDffd0zb7Tum7fYd03b7jmm7fce03b5j2m7fMW2375i223dM2+07pu32HdN2+45pu33HdPN9x3Tzfcd0833HdPN9x3Tzfcd0833HdPN9x7TdvmPabt8xbbfvmLbbd0zb7Tum7fYd03b7jmm7fce03b5j2m7fMW2375i223dMN993TDffd0w333dMN993TDffd0w333dMN993TNvtO6bt9h3TdvuOabt9x7zdvmPebt8xb7fvmLfbd8zHbusC3m7fMW+375i323fMN993zDffd8w333fMN993zDffd8w333fMN993zNvtO+bt9h3zdvuOebt9x7zdvmPebt8xb7fvmLfbd8zb7Tvm7fYd83b7jnm7fcd8833HfPN9x3zzfcd8833HfPN9x3zzfcd8833HvN2+Y95u3zFvt++Yt9t3zNvtO+bt9h3zdvuOebt9x7zdvmPebt8xb7fvmLfbd8w333fMN993zDffd8w333fMN993zDffd8w333fM2+075u32HfN2+455u33HvN2+Y95u3zFvt++Yt9t3zNvtO+bt9h3zdvuOebt9x3zzfcd8833HfPN9x3zzfcd8833HfPN9x3zzfce83b5j3m7fMW+375i323fM2+075u32HfN2+455u33HvN2+Y95u3zFvt++Yt9t3zDffd8w333fMN993zDffd8w333fMN993zDffd8zb7Tvm7fYd83b7jnm7fcey3b5j2W7fsWy371i223csx27rAtlu37Fst+9Yttt3LDffdyw333csN993LDffdyw333csN993LDffdyzb7TuW7fYdy3b7jmW7fcey3b5j2W7fsWy371i223cs2+07lu32Hct2+45lu33HcvN9x3Lzfcdy833HcvN9x3Lzfcdy833HcvN9x7LdvmPZbt+xbLfvWLbbdyzb7TuW7fYdy3b7jmW7fcey3b5j2W7fsWy371i223csN993LDffdyw333csN993LDffdyw333csN993LNvtO5bt9h3LdvuOZbt9x7LdvmPZbt+xbLfvWLbbdyzb7TuW7fYdy3b7jmW7fcdy833HcvN9x3Lzfcdy833HcvN9x3Lzfcdy833Hst2+Y9lu37Fst+9Yttt3LNvtO5bt9h3LdvuOZbt9x7LdvmPZbt+xbLfvWLbbdyw333csN993LDffdyw333csN993LDffdyw333cs2+07lu32Hct2+45lu33Habt9x2m7fcdpu33Habt9x+n4/f2gMo9E8jnR4//x+znb/n/8fl61/x+/nynt/8fv5752lP7/0IOMM4SPo38yH3I8jz7q9Ow7+t2QC3/In2V29pXcP5sqFeNolqOfqyzlQ25Kk6Nz6wNZPl4F02M5P0c9JyvHOU65p86VjKNr6qFr43Fs6t/m7+8bEN9mofFtFra+zdpjCH9oSLPx0HEsHR8Kap/9LthtftfvJ+n4fnK2xlzHl6lBrswL9un/75vf5Sr+PedhfJelPcdRjYNT0cfBmctvv6DfY+9dvyCtHdflEGs6JK590EmkXnhp3mRS/v1i5H/nyT2n8N8vEf/3zW804f9+NY7xdUp6Pp9R6+iS+0xbiX/7Df3+WcZdv6F7rEz/9xxo7+/nf092tv5+LvAv7fP91Od9vFU2jv4esS+wQMUcl0jPEK4cl0hL9yvHxXupWtNoWlsxxuUey/0LTGJvHMNldy7vtVMb3yi3rJ9G5ZHIe63wMdHHT34m8qbjc7oYRwtZZ05WGqcOPXPoOPG94fHa+Be42JbG90agi+N7k8rF8eeTfj76/+T8zw/PtR5/Vba+4DO1PmFl0ufNovY5/YLdlMvil/9vPl2JDlJLxB/eFT/af382nybsP5tenvafTS8L+8+mfGv/2RT/7D+bnvz2n02RwP6z6X3b/rPptWb/2c/OkrkQzf6zn50lc7WY/Wc/O0vmki77z352lsx1V/af/ewsST87S+a+KfPP5pon+89+dpbMpUb2n/3sLJkrfOw/+9lZMhfW2H/2s7Nkrn6x/+xnZ8lcomL/2c/OkrmOxP6zn50lc7GH/Wc/O0vmigz7z352lszpzv6zn50lczWE/Wc/O0vmIgT7z352lsy3/dt/9rOzZL7J3f6zn50l8+3i9p/97CyZb7y2/+xnZ8l8C7P9Zz87S+abge0/+9lZMt9Wa//Zz86S9rOzZL6v1fyz+XZS+89+dpbMN0/af/azs2S+VdD+s5+dJfONcfaf/ewsmW8xs//sZ2cJzXdr/cPf/ew8ofnOp3/4u5+dKXT87FSh+c6gf/i7n50sNN/B8w9/97PTheb7P+y/m+9L+Ie/++H5Mn+D+h/+7ofny/xFz3/4ux+eL/P30f7h7354vszf3vmHv/vh+TJ/2+Ef/u6H58v81/J/+Lsfni/zX1v/4e9+eL7Mf4P7h7/74fky/z3rH/7uh+fLDx/N0g+fzdIPH87+/8Td624cubqu2RtqbIhn8v5vrANoS3btJmdS40vLPyZgLNSDyCW9ka4aTIUS6mxCnk3oswmBNqHQJiTahEabEGkTKm1Cpk3otAmhNqHUJqTahFabEGsTam1Crk3otQnBNqHYJiTbhGabEG0Tqm1Ctk3otgnhNqHcJqTbhHabEG8T6m1Cvk3otwkBN6HgJiTchIabEHETKm5Cxk3ouAkhN6HkJqTchJabEHMTam5Czk3ouQlBN6HoJiTdhKabEHUTqm5C1k3ouglhN6HsJqTdhLabEHcT6m5C3k3ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL6b0Xcz+m5G383ouxl9N6PvZvTdjL5b0HcL+m5B3y03vtt33cVett3FXrbdxV623cVett3FXrbdxV523Y3vbruLvWy7i71sO9zLje9uO9zLje9uO9zLje9uO9zLje9uO9zLje9uO9zLje9uO9zLje9uO9zLje9uO9zLje9uO9zLje9uu9d7+fMZqU+3eaJI/3oO0/j9z5byeYnX0wpf4vUKw5d4PdjoJS6M6f+6xK/u9T2x717fE/vu9T2x7S6Mad+9vif23et7Yt99+5741X176L+6b6/3V4d7uTCmfYd7uTCmbXdhTPsO93JhTPsO97I3ppw/Ph/znevHH+/Z5eOz2+7lotvu5aLb7uWi2+7lotvu5XW3N6aLbruXi267l4tuu5eLDveyN6aLDveyN6aLDveyN6bX3d6YLjrcy96YLjrcy96YLjrcy96YLjrcy96YLjrby+E3el50tpfDb8e86Gwvh980edHZXg6/EfKis70cfnPjRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72RvTRYd72cPRRYd72RPPRYd72X+G8KLDvew/Q3jR4V72nyG86HAv+88QXnS4l/1nCC863Mv+M4QXHe5l/xnCiw73sv8M4UWHe9l/hvCiw73sffeiw73sffeiw73sffeiw73sffeiw73sffeiw73sffeiw73sffeiw73sffeiw73sffeiw72g71b03Yq+W9F3K/puRd+t6LsVfbei71b03Yq+W9F3K/puRd+t6LsVfbei71b03Yq+W9F3K/puRd+t6LsVfbei71b03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+29B3G/puQ99t6LsNfbeh7zb03Ya+2w6+W/P86srYdfu9vO72e3nd7ffyZ1frrtvv5XW330sd5av743eG/9Ht9/KyO/ju626/l7a+/v/7z2+e/93t9/K623//Xnf779/rbv/5+TI+d13K/Nh0h5+hft3tPz//utt/fv51t//8/Otuv7Nevu73Xjf3UT843+tuv7M/uz9/O/vvbv8+sfLnzwfk1eau2+/sdbff2fqoL7r9+8Trbv8+seZnVz4+yq7bf/9edoef3f2o5avbvs7Dz+6+7va7/ij9d7f7vh9+dvd1t93Lf7q+2+fhZ3dfd/ufI8pfOyvP3xW7bv9zRK+7/c8Rve7274Np9d/df/fy//8RvJfvKv3wk77vvsp+i+++yn65777Kfufvvsr+rnj3Vfb30Luvsr/j3n2V/f357qvs7+Z3X+VH7v3DT22/+yo/cu8ffiL83Vf5kXv/8CPk777Kj9z7hx8kf/dVfuTePzwF9d1X+ZF7//CE1Xdf5Ufu/cPTW999lR+59w9Phn33VX7k3j88dfbdV/mRe//wRNt3X+VH7v3D03LffZUfufcPT+J991XecL+kL1hI6Y9/tqXPa7zhbnl5jTfsK31Basprc43Dc0/ee403bOvlNd6wrJfXeMPfKS+v8e2/UX513978r+7bO/7Vfft9/Fd38JWRv+7pj48XX8Nc0pf6lfLHP93q51X2d86br3J4Bsz3rpLT5z+dc23/ucpmPSn1r7eMPHavaX+v/dvXtL83/+1r2t/Lf/U1jd+vaW5f0/7e/7evaf++8m9f08GE/+Jr+u2/KZe5e00Hb/6nr+kd77Xvfk3veGf+5msav//KnWvzmg7P//63r+nn38dfv6affx8vv9/Hy/Z9/PBM9H/7mn7+ffz1a/r2+/iv7tvvtb+6b78f/uq+/Z71q/v2+8r/1x0+h/C6+/b9+av79j30q/v2zn91397irw73cniW++sO93J4lvvrzvYyDs9yf93ZXsbhWe6vO9vL+LC9jMOz3F93tpdxeJb76872Mg7Pcn/ZHT4P8rrDvRw+D/L7v2VLeWkUuf/+9F1v6cXfPf/rn/71mg6fofqnr2m/83/7mvb30L99Tfv789++pv29/29f0/595d++psNnM//lazp8gunfvqbDZ0rPr+lX9+332l/dt98Pf3Xffs/61X37feVXd7j3X5y/jMNne153h3voZWefQR6HT9S87uwzyOPwqZfXnX0GeRw+mfK6O+zlZYd7OXwe5HWHezl8ZuNld/gUxusO93L4pMTrDvdy+DTD6w73cvjEwesO93L4VMDrDvdyOLl/3eFeDqfrrzvcy+H33L7ucC+HM/fXHe7l8DtIXne4l8NZ/OsO93I4M3/d4V4OZ9uvO9zL4Wz7dYd7OZxtv+5wL4fz59cd7uVwjvu6w70czkNfd7iXw7ni6w73cjife93hXg7nXK873MvhvOh1h3s5nLu87nAvh7OR1x3u5XA28rrDveDPaA78Gc2BP6M58Gc0x+Fs5HWHezmcjbzucC+Hs5HXne1lHs5GXne2l3k4G3nd2V7m4WzkdWd7mYezkded7WUezkZed7iXw9nI6w73cjobednhXk5nDC873MvJ6l92uJeTeb/scC8nO37Z4V5Ovvuyw72cfPdlh3tB353ouxN9d6LvTvTdib470Xcn+u5E353ouxN9d6LvTvTdib470Xcn+u5E353ouxN9d6LvTvTdib470Xcn+u5E353ouxN9d6LvTvTdib470Xcn+u5E353ouxN9d6LvTvTdib470Xcn+u5E353ouxN9d6LvTvTdib470Xcn+u5E353ouxN9d6LvTvTdib470Xcn+u5E353ouxN9d6LvTvTdib470Xcn+u5E353ouxN9d6LvTvTdib470Xcn+u5E353ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcXOu1Cp10HN33nszvXwVjfeY30cQDZN1/kHU/vfHmRdzy+8+VF3vH8zvL1gLM/fw/PHxfZj/mbFylfF5nbi7zjCbcvL/KOR9z+78edPhd5w/OgX1/kHTf8y4v8/af1po8Dqb/5In//eb3PRf7+A3ufi/z9J/Y+F3nHHf/yIu+4419e5Cfu+MNpxJsv8hN3/Dt+59PLi7zjVz69vshP3PHv+IVPry/yE3f8O37d0+uL/MQd/45f9vT6Ij9xx7/jVz29vshP3PHv+EVPry/yE3f8O37N0+uL/MQd/45f8vT6Ij9xx7/jVzy9vshP3PH747zX2Xb5r7PtllPNX//RWdvm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2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vhpy7s1IWdurBTF3bqwk5d2KkLO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTV3bqyk5d2akrO3Vlp67s1JWdurJTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTd3bqzk7d2ak7O3Vnp+7s1J2durNTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTT3bqyU492aknO/Vkp57s1JOderJTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KmXOnX+UKd+StzQU+KGnhI39JS4oafEDT0lbugpcUNPiRt6St6QOvVT8obUqZ+SN6RO/ZS8IXXqp+QNqVM/JW9InfopeUPq1E/JG1KnfkrekDr1U/KG1KmfkjekTv2UvCF16qfkDalTPyVvSJ36KXlD6tRPyRtSp35K3pA69VPyhtSpn5I3pE79lLwhdeqn5A2pUz8lb0id+il5Q+rUT8kbUqd+St6QOvVT8obUqZ+SN6RO/ZS8IXXqp+QNqVM/JW9InfopeUPq1E/JG1KnfkrekDr1U/KG1KmfkjekTv2UvCF16qfkDalTPyVvSJ36KXlD6tRPyRtSp35K3pA69VPyhtSpn5I3pE79lLwhdeqn5A2pUz+lbiixUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipEzt1YqdO7NSJnTqxUyd26sROndipMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnTqzU2d26sxOndmpMzt1ZqfO7NSZnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipCzt1Yacu7NSFnbqwUxd26sJOXdipKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqyU1d26spOXdmpKzt1Zaeu7NSVnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipGzt1Y6du7NSNnbqxUzd26sZO3dipOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnbqzU3d26s5O3dmpOzt1Z6fu7NSdnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipBzv1YKce7NSDnXqwUw926sFOPdipJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqyU0926slOPdmpJzv1ZKee7NSTnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdipFzv1Yqde7NSLnXqxUy926sVOvdSpy4c69VPihp4SN/SUuKGnxA09JW7oKXFDT4kbekrc0FPyhtSpn5I3pE79lLwhdeqn5A2pUz8lb0id+il5Q+rUT8kbUqd+St6QOvVT8obUqZ+SN6RO/ZS8IXXqp+QNqVM/JW9InfopeUPq1E/JG1KnfkrekDr1U/KG1KmfkjekTv2UvCF16qfkDalTPyVvSJ36KXlD6tRPyRtSp35K3pA69VPyhtSpn5I3pE79lLwhdeqn5A2pUz8lb0id+il5Q+rUT8kbUqd+St6QOvVT8obUqZ+SN6RO/ZS8IXXqp+QNqVM/JW9InfopeUPq1E/JG1KnfkrekDr1U/KG1KmfkjekTv2UvCF16qfkDalTPyVvSJ36KXVDiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3YqRM7dWKnTuzUiZ06sVMndurETp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUmZ06s1NndurMTp3ZqTM7dWanzuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3YqQs7dWGnLuzUhZ26sFMXdurCTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUlZ26slNXdurKTl3ZqSs7dWWnruzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3YqRs7dWOnbuzUjZ26sVM3durGTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUnZ26s1N3durOTt3ZqTs7dWen7uzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3YqQc79WCnHuzUg516sFMPdurBTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUk516slNPdurJTj3ZqSc79WSnnuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvdurFTr3YqRc79WKnXuzUi516sVMvduqlTl0/1KmfEjf0lLihp8QNPSVu6ClxQ0+JG3pK3NBT4oaekjekTv2UvCF16qfkDalTPyVvSJ36KXlD6tRPyRtSp35K3pA69VPyhtSpn5I3pE79lLwhdeqn5A2pUz8lb0id+il5Q+rUT8kbUqd+St6QOvVT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3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3p4D3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4C3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3l4D3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4C3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3t4D3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4C3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3j4D3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r4C3r7c2/OHe/vT8q6elnf1tLyrp+VdPS3v6ml5V0/Lu3pa3tXTBnbl3v60gV25tz9tYFfu7U8b2JV7+9MGduXe/rSBXbm3P21gV+7tTxvYlXv70wZ25d7+tIFdubc/bWBX7u1PG9iVe/vTBnbl3v60gV25tz9tYFfu7U8b2JV7+9MGduXe/rSBXbm3P21gV+7tTxvYlXv70wZ25d7+tIFdubc/bWBX7u1PG9iVe/vTBnbl3v60gV25tz9tYFfu7U8b2JV7+9MGduXe/rSBXbm3P21gV+7tTxvYlXv70wZ25d7+tIFdubc/bWBX7u1PG9iVe/vTBnbl3v60gV25tz9tYFfu7U8b2JV7+9MGduXe/rSBXbm3P21gV+7tTxvYlXv70wZ25d7+tL6rd287chzLtmB/qNGgm98/7vx7x8MhVavhvpcxRlZpvwkCJyyUOcOrNCwyCd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeHuDtAd4e4O0B3h7g7QHeXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f7729/nrv7U/2da+e7OtePdnXvXqyr3v1ZF/36sm+7tWTfd2rJ/u6V08WevXe258s9Oq9tz9Z6NV7b3+y0Kv33v5koVfvvf3JQq/ee/uThV699/YnC7167+1PFnr13tufLPTqvbc/WejVe29/stCr997+ZKFX7739yUKv3nv7k4Vevff2Jwu9eu/tTxZ69d7bnyz06r23P1no1Xtvf7LQq/fe/mShV++9/clCr957+5OFXr339icLvXrv7U8WevXe258s9Oq9tz9Z6NV7b3+y0Kv33v5koVfvvf3JQq/ee/uThV699/YnC7167+1PFnr13tufLPTqvbc/WejVe29/stCr997+ZKFX7739yUKv3nv7k4Vevff2Jwu9eu/tTxZ69d7bnyz06r23P1no1Xtvf7LQq/fe/mShV++9/cm+71UBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3F/D2At5ewNsLeHsBby/g7QW8vYC3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAtwd4e4C3B3h7gLcHeHuAt1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7BW+v4O0VvL2Ct1fw9greXsHbK3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Btzfw9gbe3sDbG3h7A29v4O0NvL2Bt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3h7B2/v4O0dvL2Dt3fw9g7e3sHbO3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2Atw/w9gHePsDbB3j7AG8f4O0DvH2At0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7BG+f4O0TvH2Ct0/w9gnePsHbJ3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bty/w9gXevsDbF3j7Am9f4O0LvH2Bt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3evsHbN3j7Bm/f4O0bvH2Dt2/w9g3e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"
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\ncontract CoinToss {\n    use dep::aztec::context::Context;\n    use crate::types::bet_note::{BetNote, BetNoteMethods, BET_NOTE_LEN};\n    use crate::types::config_note::{ConfigNote, ConfigNoteMethods, CONFIG_NOTE_LEN};\n    use crate::types::result_note::{ResultNote, ResultNoteMethods, RESULT_NOTE_LEN};\n \n    use crate::types::oracle::{\n        PrivateOraclePrivateContextInterface,\n        FromSubmitQuestionStruct,\n        DivinityAddressSubmitQuestionStruct\n    };\n    use crate::types::token::{\n        TokenPrivateContextInterface, \n        FromTransferStruct, \n        ToTransferStruct, \n        FromEscrowStruct,\n        OwnerEscrowStruct,\n        RecipientSettleEscrowStruct,\n        OwnerSettleEscrowStruct,\n        AccountsBroadcastEscrowNoteForStruct\n    };\n\n    use dep::aztec::note::{\n        note_getter_options::NoteGetterOptions,\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        note_viewer_options::NoteViewerOptions,\n        utils as note_utils\n    };\n\n    use dep::std::option::Option;\n\n    use dep::aztec::log::emit_encrypted_log;\n    use dep::aztec::oracle::{\n        get_public_key::get_public_key,\n        rand::rand\n    };\n    use dep::aztec::state_vars::{\n        public_state::PublicState,\n        map::Map,\n        set::Set,\n        immutable_singleton::ImmutableSingleton\n    };\n    use dep::aztec::selector::compute_selector;\n    use dep::aztec::types::address::AztecAddress;\n\n\n    global CONFIG_NOTE_SLOT = 1;\n    global BETS_SLOT = 2;\n    global RESULT_SLOT = 3;\n\n    // TODO: add slow update tree to make the switch from private to public\n    struct Storage {\n        config: ImmutableSingleton<ConfigNote, CONFIG_NOTE_LEN>,\n        bets: Set<BetNote, BET_NOTE_LEN>,\n        results: Set<ResultNote, RESULT_NOTE_LEN>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                config: ImmutableSingleton::new(\n                    context,\n                    CONFIG_NOTE_SLOT,\n                    ConfigNoteMethods,\n                ),\n                bets: Set::new(context, BETS_SLOT, BetNoteMethods),\n                results: Set::new(context, RESULT_SLOT, ResultNoteMethods)\n            }\n        }\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    fn constructor(divinity: AztecAddress, private_oracle: AztecAddress, house: AztecAddress, token: AztecAddress, bet_amount: Field) {\n        let mut config_note = ConfigNote::new(divinity, private_oracle, house, token, bet_amount);\n        storage.config.initialize(&mut config_note, Option::none(), false);\n    }\n\n    // House shares off-chain with the user the preimage for an escrow note for the bet_amount and an authwit to consume it\n    #[aztec(private)]\n    fn create_bet(bet: bool, userTransferNonce: Field, houseEscrowRandomness: Field, houseSettleEscrowNonce: Field, user_question: Field) {\n        let sender = AztecAddress::new(context.msg_sender());\n        let config_note = storage.config.get_note();\n        let house = config_note.house;\n        let token = config_note.token;\n        let divinity = config_note.divinity;\n        let oracle = config_note.private_oracle;\n        let bet_amount = config_note.bet_amount;\n        let address_this = AztecAddress::new(context.this_address());\n\n        let oracle_contract = PrivateOraclePrivateContextInterface::at(oracle.address);\n        let oracle_fee = oracle_contract.get_fee_note(&mut context)[0];\n        let user_fees = bet_amount + oracle_fee;\n\n        let token_contract = TokenPrivateContextInterface::at(token.address);\n\n        // // We transfer private tokens from the user to the coin toss \n        let _ = token_contract.transfer(\n            &mut context,\n            FromTransferStruct { address: sender.address },\n            ToTransferStruct { address: address_this.address },\n            user_fees,\n            userTransferNonce\n        );\n\n        // // We consume the escrow from the house\n        let ___ = token_contract.settle_escrow(\n            &mut context,\n            OwnerSettleEscrowStruct { address: house.address },\n            RecipientSettleEscrowStruct { address: address_this.address }, \n            houseEscrowRandomness,\n            houseSettleEscrowNonce\n        );\n\n        // Create a combined escrow with both amounts\n        let escrow_randomness = token_contract.escrow(\n            &mut context,\n            FromEscrowStruct { address: address_this.address },\n            OwnerEscrowStruct { address: address_this.address },\n            bet_amount * 2,\n            0\n        )[0];\n\n        if (escrow_randomness != 0) {\n            // Share with the user and the house\n            let ____ = token_contract.broadcast_escrow_note_for(\n                &mut context,\n                [\n                    AccountsBroadcastEscrowNoteForStruct { address: sender.address },\n                    AccountsBroadcastEscrowNoteForStruct { address: house.address }, \n                    AccountsBroadcastEscrowNoteForStruct { address: 0 },\n                    AccountsBroadcastEscrowNoteForStruct { address: 0 }\n                ],\n                escrow_randomness\n            );\n\n            let mut user_bet: BetNote = BetNote::new(sender, bet, escrow_randomness);\n            storage.bets.insert(&mut user_bet, true);\n\n            emit_encrypted_log(\n                &mut context,\n                address_this.address,\n                BETS_SLOT,\n                get_public_key(house.address),\n                user_bet.serialize(),\n            );\n\n            let callback = [address_this.address, sender.address, user_bet.bet_id, house.address, 0 ,0];\n\n            // TODO: think if i should add checks here\n            let __ = oracle_contract.submit_question(\n                &mut context,\n                FromSubmitQuestionStruct { address: address_this.address },\n                user_question,\n                DivinityAddressSubmitQuestionStruct{ address: divinity.address },\n                0,\n                callback,\n            );\n\n        } else {\n            assert(false, \"Escrow randomness can't be 0\");\n        }\n    }\n\n    // Callback triggered on submit_answer in the oracle (add the result to both the user and the house).\n    // data[0]: user address\n    // data[1]: bet_id (the randomness generated when creating the bet note)\n    // data[2]: house address\n    // data[2:5]: unused\n    #[aztec(private)]\n    fn oracle_callback(answer: Field, data: [Field; 5]) {\n        let sender = AztecAddress::new(context.msg_sender());\n\n        let mut result_note_user = ResultNote::new(AztecAddress::new(data[0]), sender, data[1], answer as bool);\n        let mut result_note_house = ResultNote::new(AztecAddress::new(data[2]), sender, data[1], answer as bool);\n\n        storage.results.insert(&mut result_note_user, true);\n        storage.results.insert(&mut result_note_house, true);\n    }\n\n    #[aztec(private)]\n    fn settle_bet(bet_id: Field) {\n        let config_note = storage.config.get_note();\n\n        let house = config_note.house;\n        let token = config_note.token;\n        let oracle = config_note.private_oracle;\n        \n        let address_this = AztecAddress::new(context.this_address());\n        \n        let bets = storage.bets;\n\n        let options = NoteGetterOptions::new().select(1, bet_id).set_limit(1);\n        let bet_notes = bets.get_notes(options);\n        \n        if(bet_notes[0].is_some()) {\n            let note = bet_notes[0].unwrap_unchecked();\n\n            // Filter by bet_id and result sender (which must be the oracle)\n            let result_getter_option = NoteGetterOptions::new().select(2, bet_id).select(1, oracle.address).set_limit(1);\n            let result_note = storage.results.get_notes(result_getter_option)[0];\n\n            assert(result_note.is_some(), \"Invalid bet result (not settled yet or wrong oracle)\");\n\n            let result = result_note.unwrap_unchecked().result;\n\n            // Send the bet amount to the winner\n            let receiver = if(result == note.bet) { note.owner } else { house };\n\n            let _ = TokenPrivateContextInterface::at(token.address).settle_escrow(\n                &mut context,\n                OwnerSettleEscrowStruct { address: address_this.address },\n                RecipientSettleEscrowStruct { address: receiver.address }, \n                note.escrow_randomness,\n                0\n            );\n\n            // Nullify the bet note\n            bets.remove(note);\n        } else {\n            assert(false, \"Bet not found\");\n        }\n    }\n\n    // Returns the divinity address\n    unconstrained fn get_config_unconstrained() -> ConfigNote {\n        storage.config.view_note()\n    }\n\n    unconstrained fn get_user_bets_unconstrained(user: AztecAddress, start_offset: u32) -> [Option<BetNote>; 10] {\n        let user_bets_getter_option = NoteViewerOptions::new().select(0, user.address).set_offset(start_offset);\n        storage.bets.view_notes(user_bets_getter_option)\n    }\n\n    unconstrained fn get_results_unconstrained(owner: AztecAddress, start_offset: u32) -> [Option<ResultNote>; 10] {\n        let results_getter_option = NoteViewerOptions::new().select(0, owner.address).set_offset(start_offset);\n        storage.results.view_notes(results_getter_option)\n    }\n\n    // Computes note hash and nullifier.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; CONFIG_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n\n        if(storage_slot == BETS_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(BetNoteMethods, note_header, preimage)\n        } else if(storage_slot == RESULT_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(ResultNoteMethods, note_header, preimage)\n        } else {\n            note_utils::compute_note_hash_and_nullifier(ConfigNoteMethods, note_header, preimage)\n        }\n    }\n}",
        "path": "/home/ng/code/defi/cointoss/src/main.nr"
      },
      "4": {
        "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n",
        "path": "std/hash.nr"
      },
      "33": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "75": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "92": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "93": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "95": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "102": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "107": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "108": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "110": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "114": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "116": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "117": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "123": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "126": {
        "source": "#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/aztec/oracle/rand.nr"
      },
      "130": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "132": {
        "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
        "path": "/aztec/oracle/logs.nr"
      },
      "133": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "137": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "140": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse dep::protocol_types::constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "141": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "145": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "151": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
        "path": "/aztec/utils.nr"
      },
      "153": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress,\n    }\n};\n\nstruct BetNote {\n    owner: AztecAddress,\n    bet_id: Field,\n    bet: bool, // Heads is 0 (False). Tails is 1 (True).\n    escrow_randomness: Field,\n    header: NoteHeader\n}\n\nglobal BET_NOTE_LEN: Field = 4;\n\nimpl BetNote {\n    pub fn new(_owner: AztecAddress, _bet: bool, _escrow_randomness: Field) -> Self {\n        BetNote {\n            owner: _owner,\n            bet_id: rand(),\n            bet: _bet,\n            escrow_randomness: _escrow_randomness,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; BET_NOTE_LEN] {\n        [self.owner.address, self.bet_id, self.bet as Field, self.escrow_randomness]\n    }\n\n    fn deserialize(preimage: [Field; BET_NOTE_LEN]) -> Self {\n        BetNote {\n            owner: AztecAddress::new(preimage[0]),\n            bet_id: preimage[1],\n            bet: preimage[2] as bool,\n            escrow_randomness: preimage[3],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.bet_id,\n            self.bet as Field,\n            self.escrow_randomness,\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(BetNoteMethods, self);\n        let nullifier_key = self.bet_id;\n\n        dep::std::hash::pedersen_hash([\n            note_hash_for_nullify,\n            nullifier_key,\n        ])\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; BET_NOTE_LEN]) -> BetNote {\n    BetNote::deserialize(preimage)\n}\n\nfn serialize(note: BetNote) -> [Field; BET_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BetNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BetNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BetNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BetNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BetNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BetNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/ng/code/defi/cointoss/src/types/bet_note.nr"
      },
      "154": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n\n    context::PrivateContext,\n    types::{\n        address::AztecAddress\n    }\n};\n\nstruct ConfigNote {\n    divinity: AztecAddress,\n    private_oracle: AztecAddress,\n    house: AztecAddress,\n    token: AztecAddress,\n    bet_amount: Field,\n    header: NoteHeader\n}\n\nglobal CONFIG_NOTE_LEN: Field = 5;\n\nimpl ConfigNote {\n    pub fn new(_divinity: AztecAddress, _private_oracle: AztecAddress, _house: AztecAddress, _token: AztecAddress, _amount: Field) -> Self {\n        ConfigNote {\n            divinity: _divinity,\n            private_oracle: _private_oracle,\n            house: _house,\n            token: _token,\n            bet_amount: _amount,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; CONFIG_NOTE_LEN] {\n        [self.divinity.address, self.private_oracle.address, self.house.address, self.token.address, self.bet_amount]\n    }\n\n    fn deserialize(preimage: [Field; CONFIG_NOTE_LEN]) -> Self {\n        ConfigNote {\n            divinity: AztecAddress::new(preimage[0]),\n            private_oracle: AztecAddress::new(preimage[1]),\n            house: AztecAddress::new(preimage[2]),\n            token: AztecAddress::new(preimage[3]),\n            bet_amount: preimage[4],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.divinity.address,\n            self.private_oracle.address,\n            self.house.address,\n            self.token.address,\n            self.bet_amount\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n         let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n         0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        // no owner == no broadcast\n        let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n        let __ = context;\n        let ___ = slot;\n    }\n}\n\nfn deserialize(preimage: [Field; CONFIG_NOTE_LEN]) -> ConfigNote {\n    ConfigNote::deserialize(preimage)\n}\n\nfn serialize(note: ConfigNote) -> [Field; CONFIG_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ConfigNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ConfigNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ConfigNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ConfigNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ConfigNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ConfigNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/ng/code/defi/cointoss/src/types/config_note.nr"
      },
      "155": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress,\n    }\n};\n\nstruct ResultNote {\n    owner: AztecAddress,\n    sender: AztecAddress,\n    bet_id: Field,\n    result: bool, // Heads is 0 (False). Tails is 1 (True).\n    header: NoteHeader\n}\n\nglobal RESULT_NOTE_LEN: Field = 4;\n\nimpl ResultNote {\n    pub fn new(_owner: AztecAddress, _sender: AztecAddress, _bet_id: Field, _result: bool) -> Self {\n        ResultNote {\n            owner: _owner,\n            sender: _sender,\n            bet_id: _bet_id,\n            result: _result,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; RESULT_NOTE_LEN] {\n        [self.owner.address, self.sender.address, self.bet_id, self.result as Field]\n    }\n\n    fn deserialize(preimage: [Field; RESULT_NOTE_LEN]) -> Self {\n        ResultNote {\n            owner: AztecAddress::new(preimage[0]),\n            sender: AztecAddress::new(preimage[1]),\n            bet_id: preimage[2],\n            result: preimage[3] as bool,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.sender.address,\n            self.bet_id,\n            self.result as Field\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let _ = self;\n        0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; RESULT_NOTE_LEN]) -> ResultNote {\n    ResultNote::deserialize(preimage)\n}\n\nfn serialize(note: ResultNote) -> [Field; RESULT_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ResultNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ResultNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ResultNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ResultNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ResultNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ResultNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/ng/code/defi/cointoss/src/types/result_note.nr"
      },
      "156": {
        "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\nstruct AccountsBroadcastEscrowNoteForStruct {\n  address: Field,\n}\n\nstruct FromBurnPublicStruct {\n  address: Field,\n}\n\nstruct FromEscrowStruct {\n  address: Field,\n}\n\nstruct OwnerEscrowStruct {\n  address: Field,\n}\n\nstruct ToMintPublicStruct {\n  address: Field,\n}\n\nstruct ToRedeemShieldStruct {\n  address: Field,\n}\n\nstruct NewAdminSetAdminStruct {\n  address: Field,\n}\n\nstruct MinterSetMinterStruct {\n  address: Field,\n}\n\nstruct OwnerSettleEscrowStruct {\n  address: Field,\n}\n\nstruct RecipientSettleEscrowStruct {\n  address: Field,\n}\n\nstruct FromShieldStruct {\n  address: Field,\n}\n\nstruct FromTransferStruct {\n  address: Field,\n}\n\nstruct ToTransferStruct {\n  address: Field,\n}\n\nstruct FromTransferPublicStruct {\n  address: Field,\n}\n\nstruct ToTransferPublicStruct {\n  address: Field,\n}\n\nstruct FromUnshieldStruct {\n  address: Field,\n}\n\nstruct ToUnshieldStruct {\n  address: Field,\n}\n\n\n// Interface for calling Token functions from a private context\nstruct TokenPrivateContextInterface {\n  address: Field,\n}\n\nimpl TokenPrivateContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn broadcast_escrow_note_for(\n    self,\n    context: &mut PrivateContext,\n    accounts: [AccountsBroadcastEscrowNoteForStruct;4],\n    randomness: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = accounts[0].address;\n    serialized_args[1] = accounts[1].address;\n    serialized_args[2] = accounts[2].address;\n    serialized_args[3] = accounts[3].address;\n    serialized_args[4] = randomness;\n\n    context.call_private_function(self.address, 0x2426c148, serialized_args)\n  }\n  \n\n  pub fn burn_public(\n    self,\n    context: &mut PrivateContext,\n    from: FromBurnPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_public_function(self.address, 0xb0e964d5, serialized_args)\n  }\n  \n\n  pub fn escrow(\n    self,\n    context: &mut PrivateContext,\n    from: FromEscrowStruct,\n    owner: OwnerEscrowStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = owner.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x54f7b220, serialized_args)\n  }\n  \n\n  pub fn mint_private(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secret_hash: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x10763932, serialized_args)\n  }\n  \n\n  pub fn mint_public(\n    self,\n    context: &mut PrivateContext,\n    to: ToMintPublicStruct,\n    amount: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n\n    context.call_public_function(self.address, 0x6bfd1d5b, serialized_args)\n  }\n  \n\n  pub fn redeem_shield(\n    self,\n    context: &mut PrivateContext,\n    to: ToRedeemShieldStruct,\n    amount: Field,\n    secret: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret;\n\n    context.call_private_function(self.address, 0xb77168f2, serialized_args)\n  }\n  \n\n  pub fn set_admin(\n    self,\n    context: &mut PrivateContext,\n    new_admin: NewAdminSetAdminStruct\n  ) {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = new_admin.address;\n\n    context.call_public_function(self.address, 0x41b90896, serialized_args)\n  }\n  \n\n  pub fn set_minter(\n    self,\n    context: &mut PrivateContext,\n    minter: MinterSetMinterStruct,\n    approve: bool\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = minter.address;\n    serialized_args[1] = approve as Field;\n\n    context.call_public_function(self.address, 0x7f020b80, serialized_args)\n  }\n  \n\n  pub fn settle_escrow(\n    self,\n    context: &mut PrivateContext,\n    owner: OwnerSettleEscrowStruct,\n    recipient: RecipientSettleEscrowStruct,\n    randomness: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = owner.address;\n    serialized_args[1] = recipient.address;\n    serialized_args[2] = randomness;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x510f50d4, serialized_args)\n  }\n  \n\n  pub fn shield(\n    self,\n    context: &mut PrivateContext,\n    from: FromShieldStruct,\n    amount: Field,\n    secret_hash: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret_hash;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x1d24add0, serialized_args)\n  }\n  \n\n  pub fn transfer(\n    self,\n    context: &mut PrivateContext,\n    from: FromTransferStruct,\n    to: ToTransferStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0xb1aa668a, serialized_args)\n  }\n  \n\n  pub fn transfer_public(\n    self,\n    context: &mut PrivateContext,\n    from: FromTransferPublicStruct,\n    to: ToTransferPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x7db8f449, serialized_args)\n  }\n  \n\n  pub fn unshield(\n    self,\n    context: &mut PrivateContext,\n    from: FromUnshieldStruct,\n    to: ToUnshieldStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x78303b89, serialized_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling Token functions from a public context\nstruct TokenPublicContextInterface {\n  address: Field,\n}\n\nimpl TokenPublicContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn burn_public(\n    self,\n    context: PublicContext,\n    from: FromBurnPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_public_function(self.address, 0xb0e964d5, serialized_args)\n  }\n  \n\n  pub fn mint_private(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secret_hash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x10763932, serialized_args)\n  }\n  \n\n  pub fn mint_public(\n    self,\n    context: PublicContext,\n    to: ToMintPublicStruct,\n    amount: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n\n    context.call_public_function(self.address, 0x6bfd1d5b, serialized_args)\n  }\n  \n\n  pub fn set_admin(\n    self,\n    context: PublicContext,\n    new_admin: NewAdminSetAdminStruct\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = new_admin.address;\n\n    context.call_public_function(self.address, 0x41b90896, serialized_args)\n  }\n  \n\n  pub fn set_minter(\n    self,\n    context: PublicContext,\n    minter: MinterSetMinterStruct,\n    approve: bool\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = minter.address;\n    serialized_args[1] = approve as Field;\n\n    context.call_public_function(self.address, 0x7f020b80, serialized_args)\n  }\n  \n\n  pub fn shield(\n    self,\n    context: PublicContext,\n    from: FromShieldStruct,\n    amount: Field,\n    secret_hash: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret_hash;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x1d24add0, serialized_args)\n  }\n  \n\n  pub fn transfer_public(\n    self,\n    context: PublicContext,\n    from: FromTransferPublicStruct,\n    to: ToTransferPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x7db8f449, serialized_args)\n  }\n  \n}\n  \n  \n",
        "path": "/home/ng/code/defi/cointoss/src/types/token.nr"
      },
      "157": {
        "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\nstruct RequesterSubmitAnswerStruct {\n  address: Field,\n}\n\nstruct FromSubmitQuestionStruct {\n  address: Field,\n}\n\nstruct DivinityAddressSubmitQuestionStruct {\n  address: Field,\n}\n\n\n// Interface for calling PrivateOracle functions from a private context\nstruct PrivateOraclePrivateContextInterface {\n  address: Field,\n}\n\nimpl PrivateOraclePrivateContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn cancel_question(\n    self,\n    context: &mut PrivateContext,\n    question: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = question;\n\n    context.call_private_function(self.address, 0x7d126cd4, serialized_args)\n  }\n  \n\n  pub fn consult_answer(\n    self,\n    context: &mut PrivateContext,\n    question: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = question;\n\n    context.call_private_function(self.address, 0x907da598, serialized_args)\n  }\n  \n\n  pub fn get_fee_note(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0x95f22a18, serialized_args)\n  }\n  \n\n  pub fn get_payment_token_note(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0xa8497ead, serialized_args)\n  }\n  \n\n  pub fn initialize_payment_token(\n    self,\n    context: &mut PrivateContext,\n    payment_token: Field,\n    fee: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = payment_token;\n    serialized_args[1] = fee;\n\n    context.call_public_function(self.address, 0x233e29de, serialized_args)\n  }\n  \n\n  pub fn submit_answer(\n    self,\n    context: &mut PrivateContext,\n    question: Field,\n    requester: RequesterSubmitAnswerStruct,\n    answer: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = question;\n    serialized_args[1] = requester.address;\n    serialized_args[2] = answer;\n\n    context.call_private_function(self.address, 0xdc92d6e8, serialized_args)\n  }\n  \n\n  pub fn submit_question(\n    self,\n    context: &mut PrivateContext,\n    from: FromSubmitQuestionStruct,\n    question: Field,\n    divinity_address: DivinityAddressSubmitQuestionStruct,\n    nonce: Field,\n    callback: [Field;6]\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 10];\n    serialized_args[0] = from.address;\n    serialized_args[1] = question;\n    serialized_args[2] = divinity_address.address;\n    serialized_args[3] = nonce;\n    serialized_args[4] = callback[0];\n    serialized_args[5] = callback[1];\n    serialized_args[6] = callback[2];\n    serialized_args[7] = callback[3];\n    serialized_args[8] = callback[4];\n    serialized_args[9] = callback[5];\n\n    context.call_private_function(self.address, 0xb9d88bb1, serialized_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling PrivateOracle functions from a public context\nstruct PrivateOraclePublicContextInterface {\n  address: Field,\n}\n\nimpl PrivateOraclePublicContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn initialize_payment_token(\n    self,\n    context: PublicContext,\n    payment_token: Field,\n    fee: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = payment_token;\n    serialized_args[1] = fee;\n\n    context.call_public_function(self.address, 0x233e29de, serialized_args)\n  }\n  \n}\n  \n  \n",
        "path": "/home/ng/code/defi/cointoss/src/types/oracle.nr"
      }
    }
  }
}