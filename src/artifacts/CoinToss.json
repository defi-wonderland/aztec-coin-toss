{
  "name": "CoinToss",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "divinity",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "private_oracle",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "house",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "bet_amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+Xdh5MTVRwH8M1dNuFUEES9ChxHhwN2k81lg6gn2Atib6hcvESxcIhnQVERe8euYEEs9N77f8bw+868wCMcDDP5HcPjuzO/2SN3bN7nbbL9/X7HPc/b4J2eEmbebeZBbVPoyzL8AZabDbqiqJTPlMJs2BNkCsU4F0S5YlccxmEuzvVm4my2FEdxvlAs5INCGGVLYTlXyJbNgn29NgaD4U7JMlKD4E5d4u60LCM9CO60svtcn/da29mm2M6E6ct2s7xGiRMSTWbebOYtZt5q5m2X6bxTYpRZZ+iX4aZfRl0C7RrtnTlpf67GeHrf0Ur/Vdo4xjiwbWm3+tc3v7/Qzx2msdb/r6ta/ljr7zok6k2ca+pW9Pre+ddPUNsUNnr62yftNjY50MZmB9rY4kAbW72Ls78MapvCDk93f1mZxkmMND83eGdvZ/BassqE7Z+v7Gswy8VUZ72Pp/s+uYGONYMapwarzfUD9GVygL70rdf8Ki/+PdT6vVfVL8PM36aU10HCal9lucmqtg2RGGF+XtzXv6i8bO7SUk9/qXdeX3/J/mClqjrEBiSs1+0djt0p6arl2J2ctub2e55qtUZv2MvU/jaP89w4Sh+v085ylInOaGedcn8mFM0TBmndaJvrFM0THTHXK5onOWJOKponO2L2Fc1THDGnFM1THTGnFc3THDGPVjR3OmJuUzRPJzTPIDTPJDQHhOaQ0JwhNGcJzRGhOUdo7iI05wnNMaG5QGieRWi+gdA8m9B8I6H5JkLzzYTmbkLzLYTmOYTmuYTmWwnNtxGabyc030FovpPQfBeh+W5C8z2E5nsJzfcRmucRmu8nNM8nND9AaH6Q0PwQoflhQvMjhOZHCc2PEZofJzQ/QWh+ktD8FKF5AaH5aULzM4TmZwnNCwnNPYTmIqH5OUJzL6G5RGguE5qfJzS/QGheRGh+kdD8EqH5ZULzK4TmxYTmPkLzEkfMHYrmVwnX81JC82uE5n5C8+uE5jcIzW8Smt8iNC8jNL9NaH6H0Lyc0Pwuofk9QvP7hOYVjpjbFc0fEK7nlYTmDwnNHxGaPyY0f0Jo/pTQ/Bmh+XNC8xeE5i8JzV8Rmr8mNH9DaP6W0LzKEfN4RfN3hOv5e0LzD4TmHwnNPxGafyY0/0Jo/pXQ/BuheTWheQ2h+XdC8x+E5j8JzX8RmtcSmv8mNK8jNP9DaP6X0Pwfofl/QvN6QvMGQvNGQvMmQvNmQvMWQvNWQvM2QvN2QvMOR8xDFM07HTE3KJp3OWK+QtG82xHzlYrmPY6Yr1I073XEPFTRvM8R8zBF835HzFcrmg84Yh6uaD7oiHmEovmQI+ZrFM2HHTGPVDQfccR8raL5qCPm6xTNxxwxX69oPq5objXLSRhzvURSwpdISaQlcE6IcyScM+AYGseUOMbCMQf2wdgnYRuNbRa+w/hMYx3D3CjRJNEs0SLRavXxGjOfIDFRYpLEZIkpElMlpkl0SkyXmCExE16JUCKDfpSIJHISXRJ5iViiIDFLAnXvZ0ugLjrqhFfqZqOu8hwJ1N1FHVrUZUWdUtTtRB1L1HVEnUPU/UMdPNSFQ5001A2bL4G6UqizhLpDqMODujSo04K6JajjgboWqPOAugcLJJAXH3nikTd9oQTyahclkHcZeYiRlxd5apG3FXlMkdcTeS6R9xF5EJEXEHnykDduiQTyiiHPFvJOIQ8T8hIhTw/y1iCPC/KaIM8H8l4sl0BeBOQJwLj5FRIYV71SAuNuMQ4V4zIxThHj9jCODeO6MM4J434wDgbjQjBOAuMGVknguXI8Z43njvEcLp5LxXOaeG4Rz/HhubbVZv3iOSA8F4PnRPDcxFoJ3FdfJ4H7rrgPiftyuE+F+za4j4Hr+rjOjeu+uA6K64K4TobrRriOgusKOM/GeSfOw3BeguN0HLfiOA7HNdjPY7+H/QC2i9hO4HtTmU4C4ACFXfalAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_bet",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        },
        {
          "name": "userTransferNonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "houseEscrowRandomness",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "houseSettleEscrowNonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_config_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::config_note::ConfigNote",
          "fields": [
            {
              "name": "divinity",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "private_oracle",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "house",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "token",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "bet_amount",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_results_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::result_note::ResultNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "bet_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "result",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_user_bets_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::bet_note::BetNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "randomness",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "bet",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "escrow_randomness",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "oracle_callback",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "answer",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "data",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "settle_bet",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzVlUFqwzAQRe+itSkzo5mR5KuULEybQiA4pfbO6O6xwZJVKmJKIG1WluGNePp8pMmcL2/deLr0g2knY037Opnhs+uXv2HsvkbTQmOO/fv8jY35OJ2PpsXY/KCQrepKzmvvMx2ohgshJlxId/DgXIKBZGMlHhrDT2ktD7S2LNmaQe6w1po1WaV1hJj8bfewsUDFOa2r0J7TOQMW+3Jt55ve7km9/b3ehJBUiIR3vF1IDfRWNxZqrPgkoUWlELlmMZc0GyNttNToudM5EmW3QzvmFXZ+25mX9ML/TU8xp6e0l15uiC2bh/DbNiE8NpDAkGXAfUtkscG/syk7uNrAC1bfPwkpUcUifZY0VX1/dqeq9/98sa9TUk5ZiIcYr1dQPSg=",
      "",
      "",
      "",
      "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pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5NZmdV5PZeTWZnVeT2Xm1D5UztsnsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8SmbnVTI7r5LZeZXMzqs+VM7Yktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZufVZXZeXWbn1WV2Xl1m59U/VM7YLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7r/7NndcYX3fSPvx7d/K9M/bNO/neGfvmnXzvjH3zTr53xr54J9/ceb15J987Y9+8k++dsW/eyffO2Dfv5Htn7Jt3InPGfnPn9eadyJyx39x5vXknMmfsN3deb96JzBn7zZ3Xm3cic8Z+c+f15p3InLHf3Hm9eScyZ+w3d15v3onMGfvNndebdyJzxn5z5/Xmncicsd/ceb15JzJn7Dd3Xm/eicwZ+82d15t3InPGfnPn9eadyJyx39x5vXknMmfsN3deb96JzBn7zZ3Xm3cic8Z+c+f15p2onLHjmzuvN+9E5Ywd39x5vXknKmfs+FA5Y8c3d15v3onKGTu+ufN6805UztjxzZ3Xi3fyzZ3Xm3cic8Z+c+f15p3InLHf3Hm9eScyZ+w3d15v3onMGfvNndebdyJzxn5z5/Xmncicsd/ceb15JzJn7Dd3Xm/eicwZ+82d15t3InPGfnPn9eadyJyx39x5vXknMmfsN3deb96JzBn7zZ3Xm3cic8Z+c+f15p3InLHf3Hm9eScyZ+w3d15v3onMGfvNndebdyJzxn5z5/Xmncicsd/ceb15JzJn7Dd3Xm/eicwZ+82d15t3InPGfnPn9eadyJyx39x5vXknMmeszM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8hszOa8jsvIbMzmvI7LyGzM5ryOy8pszOa8rsvKbMzmvK7Lzmh8oZO2V2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZeU2bnNWV2XlNm5zVldl5TZuc1ZXZe9iEz9Fq3onLKrltROWbXraics+tWVA7adSsqJ+26FZWjdt2Kylm7bkXlsF23onPayky+1q3onLYyo691Kzqnrczsa92KzmkrM/xat6Jz2spMv9at6Jy2MuOvdSs6p63M/Gvdis5pKzMAW7eic9rKTMDWreictjIjsHUrOqetzAxs3YrOaSszBFu3onPaykzB1q3onLYyY7B1KzqnrcwcbN2KzmkrMwhbt6Jz2spMwtat6Jy2MqOwdSs6p63MLGzdis5pKzMMW7eic9rKTMPWreictjLjsHUrOqetzDxs3YrOaSszEFu3onPaykzE1q3onLYyI7F1KzqnrcxMbN2KzmkrMxRbt6Jz2spMxdat6Jy2MmOxdSs6p63MXGzdis5pKzMYW7eic9rKTMbWreictjKjsXUrOqetzGxs3YrOaSszHFu3onPaykzH1q3onLYy47F1Kzqnrcx8bN2KzmkrMyBbt6Jz2spMyNat6Jy2MiOydSs6p63MjGzdis5pKzMkW7eic9rKTMnWrcictqazJTOdLZnpbMlMZ0tmHzKnrelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlc50tmetsyVxnS+Y6WzL/kDltXWdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS1Z6GzJQmdLFjpbstDZksWHzGkbOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlSZ0uWOluy1NmSpc6WLD9kTtvU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWeps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",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\ncontract CoinToss {\n    use dep::aztec::context::Context;\n    use crate::types::bet_note::{BetNote, BetNoteMethods, BET_NOTE_LEN};\n    use crate::types::config_note::{ConfigNote, ConfigNoteMethods, CONFIG_NOTE_LEN};\n    use crate::types::result_note::{ResultNote, ResultNoteMethods, RESULT_NOTE_LEN};\n \n    use crate::types::token::{\n        TokenPrivateContextInterface, \n        FromTransferStruct, \n        ToTransferStruct, \n        FromEscrowStruct,\n        OwnerEscrowStruct,\n        RecipientSettleEscrowStruct,\n        OwnerSettleEscrowStruct,\n        AccountsBroadcastEscrowNoteForStruct\n    };\n\n    use dep::aztec::note::{\n        note_getter_options::NoteGetterOptions,\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        note_viewer_options::NoteViewerOptions,\n        utils as note_utils\n    };\n\n    use dep::std::option::Option;\n\n    use dep::aztec::log::emit_encrypted_log;\n    use dep::aztec::oracle::{\n        get_public_key::get_public_key,\n        rand::rand\n    };\n    use dep::aztec::state_vars::{\n        public_state::PublicState,\n        map::Map,\n        set::Set,\n        immutable_singleton::ImmutableSingleton\n    };\n    use dep::aztec::selector::compute_selector;\n    use dep::aztec::types::address::AztecAddress;\n\n\n    global CONFIG_NOTE_SLOT = 1;\n    global BETS_SLOT = 2;\n    global RESULT_SLOT = 3;\n\n    // TODO: add slow update tree to make the switch from private to public\n    struct Storage {\n        config: ImmutableSingleton<ConfigNote, CONFIG_NOTE_LEN>,\n        bets: Set<BetNote, BET_NOTE_LEN>,\n        result: Set<ResultNote, RESULT_NOTE_LEN>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                config: ImmutableSingleton::new(\n                    context,\n                    CONFIG_NOTE_SLOT,\n                    ConfigNoteMethods,\n                ),\n                bets: Set::new(context, BETS_SLOT, BetNoteMethods),\n                result: Set::new(context, RESULT_SLOT, ResultNoteMethods)\n            }\n        }\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    fn constructor(divinity: AztecAddress, private_oracle: AztecAddress, house: AztecAddress, token: AztecAddress, bet_amount: Field) {\n        let mut config_note = ConfigNote::new(divinity, private_oracle, house, token, bet_amount);\n        storage.config.initialize(&mut config_note, Option::none(), false);\n    }\n\n    // House shares off-chain with the user the preimage for an escrow note for the bet_amount and an authwit to consume it\n    #[aztec(private)]\n    fn create_bet(bet: bool, userTransferNonce: Field, houseEscrowRandomness: Field, houseSettleEscrowNonce: Field) {\n        let sender = AztecAddress::new(context.msg_sender());\n        let config_note = storage.config.get_note();\n        let house = config_note.house;\n        let token = config_note.token;\n        let bet_amount = config_note.bet_amount;\n        let address_this = AztecAddress::new(context.this_address());\n\n        let token_contract = TokenPrivateContextInterface::at(token.address);\n\n        // We transfer private tokens from the user to the coin toss \n        let _ = token_contract.transfer(\n            &mut context,\n            FromTransferStruct { address: sender.address },\n            ToTransferStruct { address: address_this.address },\n            bet_amount,\n            userTransferNonce\n        );\n\n        // We consume the escrow from the house\n        let __ = token_contract.settle_escrow(\n            &mut context,\n            OwnerSettleEscrowStruct { address: house.address },\n            RecipientSettleEscrowStruct { address: address_this.address }, \n            houseEscrowRandomness,\n            houseSettleEscrowNonce\n        );\n\n        // Create a combined escrow with both amounts\n        let escrow_randomness = token_contract.escrow(\n            &mut context,\n            FromEscrowStruct { address: address_this.address },\n            OwnerEscrowStruct { address: address_this.address },\n            bet_amount * 2,\n            0\n        )[0];\n\n        // Share with the user and the house\n        let ___ = token_contract.broadcast_escrow_note_for(\n            &mut context,\n            [\n                AccountsBroadcastEscrowNoteForStruct { address: sender.address },\n                AccountsBroadcastEscrowNoteForStruct { address: house.address },\n                AccountsBroadcastEscrowNoteForStruct { address: 0 },\n                AccountsBroadcastEscrowNoteForStruct { address: 0 }\n            ],\n            escrow_randomness\n        );\n\n        let mut user_bet: BetNote = BetNote::new(sender, bet, escrow_randomness);\n        storage.bets.insert(&mut user_bet, true);\n\n        emit_encrypted_log(\n            &mut context,\n            address_this.address,\n            BETS_SLOT,\n            get_public_key(house.address),\n            user_bet.serialize(),\n        );\n    }\n\n    // Callback triggered on submit_answer in the oracle (add the result to both the user and the house).\n    // data[0]: user address\n    // data[1]: bet \"id\" (the randomness generated when creating the bet note)\n    // data[2]: house address\n    // data[2:5]: unused\n    #[aztec(private)]\n    fn oracle_callback(answer: Field, data: [Field; 5]) {\n        let sender = AztecAddress::new(context.msg_sender());\n\n        let mut result_note_user = ResultNote::new(AztecAddress::new(data[0]), sender, data[1], answer as bool);\n        let mut result_note_house = ResultNote::new(AztecAddress::new(data[2]), sender, data[1], answer as bool);\n\n        storage.result.insert(&mut result_note_user, true);\n        storage.result.insert(&mut result_note_house, true);\n    }\n\n    #[aztec(private)]\n    fn settle_bet(bet_id: Field) {\n        // Place holder, oracle auth MUST be checked here\n        // assert(ResultNote.sender.address == config_note.private_oracle.address, \"Unauthorized callback\");\n\n        let config_note = storage.config.get_note();\n        let house = config_note.house;\n        let token = config_note.token;\n        let address_this = AztecAddress::new(context.this_address());\n        let bets = storage.bets;\n\n        let options = NoteGetterOptions::new().select(1, bet_id).set_limit(1);\n        let notes = bets.get_notes(options);\n        \n        if(notes[0].is_some()) {\n            let note = notes[0].unwrap_unchecked();\n\n            // TODO: Change receiver depending on the winner\n            let receiver = house;\n\n            // Nullify the bet note\n            bets.remove(note);\n\n            let _ = TokenPrivateContextInterface::at(token.address).settle_escrow(\n                &mut context,\n                OwnerSettleEscrowStruct { address: address_this.address },\n                RecipientSettleEscrowStruct { address: receiver.address }, \n                note.escrow_randomness,\n                0\n            );\n        } else {\n            assert(false, \"Bet not found\");\n        }\n    }\n\n    // Returns the divinity address\n    unconstrained fn get_config_unconstrained() -> ConfigNote {\n        storage.config.view_note()\n    }\n\n    unconstrained fn get_user_bets_unconstrained(user: AztecAddress, start_offset: u32) -> [Option<BetNote>; 10] {\n        let user_bets_getter_option = NoteViewerOptions::new().select(0, user.address).set_offset(start_offset);\n        storage.bets.view_notes(user_bets_getter_option)\n    }\n\n    unconstrained fn get_results_unconstrained(owner: AztecAddress, start_offset: u32) -> [Option<ResultNote>; 10] {\n        let results_getter_option = NoteViewerOptions::new().select(0, owner.address).set_offset(start_offset);\n        storage.result.view_notes(results_getter_option)\n    }\n\n    // Computes note hash and nullifier.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; CONFIG_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n\n        if(storage_slot == BETS_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(BetNoteMethods, note_header, preimage)\n        } else if(storage_slot == RESULT_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(ResultNoteMethods, note_header, preimage)\n        } else {\n            note_utils::compute_note_hash_and_nullifier(ConfigNoteMethods, note_header, preimage)\n        }\n    }\n}",
        "path": "/home/shaito/wonderland/aztec-coin-toss/src/main.nr"
      },
      "4": {
        "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n",
        "path": "std/hash.nr"
      },
      "33": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "75": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "92": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "93": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "95": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "102": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "107": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "108": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "110": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "114": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "116": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "117": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "123": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "126": {
        "source": "#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/aztec/oracle/rand.nr"
      },
      "130": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "132": {
        "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
        "path": "/aztec/oracle/logs.nr"
      },
      "133": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "137": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "140": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse dep::protocol_types::constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "141": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "145": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "151": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
        "path": "/aztec/utils.nr"
      },
      "153": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress,\n    }\n};\n\nstruct BetNote {\n    owner: AztecAddress,\n    randomness: Field,\n    bet: bool, // Heads is 0 (False). Tails is 1 (True).\n    escrow_randomness: Field,\n    header: NoteHeader\n}\n\nglobal BET_NOTE_LEN: Field = 4;\n\nimpl BetNote {\n    pub fn new(_owner: AztecAddress, _bet: bool, _escrow_randomness: Field) -> Self {\n        BetNote {\n            owner: _owner,\n            randomness: rand(),\n            bet: _bet,\n            escrow_randomness: _escrow_randomness,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; BET_NOTE_LEN] {\n        [self.owner.address, self.randomness, self.bet as Field, self.escrow_randomness]\n    }\n\n    fn deserialize(preimage: [Field; BET_NOTE_LEN]) -> Self {\n        BetNote {\n            owner: AztecAddress::new(preimage[0]),\n            randomness: preimage[1],\n            bet: preimage[2] as bool,\n            escrow_randomness: preimage[3],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.randomness,\n            self.bet as Field,\n            self.escrow_randomness,\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(BetNoteMethods, self);\n        let nullifier_key = self.randomness;\n\n        dep::std::hash::pedersen_hash([\n            note_hash_for_nullify,\n            nullifier_key,\n        ])\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; BET_NOTE_LEN]) -> BetNote {\n    BetNote::deserialize(preimage)\n}\n\nfn serialize(note: BetNote) -> [Field; BET_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BetNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BetNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BetNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BetNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BetNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BetNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/shaito/wonderland/aztec-coin-toss/src/types/bet_note.nr"
      },
      "154": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n\n    context::PrivateContext,\n    types::{\n        address::AztecAddress\n    }\n};\n\nstruct ConfigNote {\n    divinity: AztecAddress,\n    private_oracle: AztecAddress,\n    house: AztecAddress,\n    token: AztecAddress,\n    bet_amount: Field,\n    header: NoteHeader\n}\n\nglobal CONFIG_NOTE_LEN: Field = 5;\n\nimpl ConfigNote {\n    pub fn new(_divinity: AztecAddress, _private_oracle: AztecAddress, _house: AztecAddress, _token: AztecAddress, _amount: Field) -> Self {\n        ConfigNote {\n            divinity: _divinity,\n            private_oracle: _private_oracle,\n            house: _house,\n            token: _token,\n            bet_amount: _amount,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; CONFIG_NOTE_LEN] {\n        [self.divinity.address, self.private_oracle.address, self.house.address, self.token.address, self.bet_amount]\n    }\n\n    fn deserialize(preimage: [Field; CONFIG_NOTE_LEN]) -> Self {\n        ConfigNote {\n            divinity: AztecAddress::new(preimage[0]),\n            private_oracle: AztecAddress::new(preimage[1]),\n            house: AztecAddress::new(preimage[2]),\n            token: AztecAddress::new(preimage[3]),\n            bet_amount: preimage[4],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.divinity.address,\n            self.private_oracle.address,\n            self.house.address,\n            self.token.address,\n            self.bet_amount\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n         let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n         0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        // no owner == no broadcast\n        let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n        let __ = context;\n        let ___ = slot;\n    }\n}\n\nfn deserialize(preimage: [Field; CONFIG_NOTE_LEN]) -> ConfigNote {\n    ConfigNote::deserialize(preimage)\n}\n\nfn serialize(note: ConfigNote) -> [Field; CONFIG_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ConfigNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ConfigNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ConfigNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ConfigNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ConfigNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ConfigNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/shaito/wonderland/aztec-coin-toss/src/types/config_note.nr"
      },
      "155": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress,\n    }\n};\n\nstruct ResultNote {\n    owner: AztecAddress,\n    sender: AztecAddress,\n    bet_id: Field,\n    result: bool, // Heads is 0 (False). Tails is 1 (True).\n    header: NoteHeader\n}\n\nglobal RESULT_NOTE_LEN: Field = 4;\n\nimpl ResultNote {\n    pub fn new(_owner: AztecAddress, _sender: AztecAddress, _bet_id: Field, _result: bool) -> Self {\n        ResultNote {\n            owner: _owner,\n            sender: _sender,\n            bet_id: _bet_id,\n            result: _result,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; RESULT_NOTE_LEN] {\n        [self.owner.address, self.sender.address, self.bet_id, self.result as Field]\n    }\n\n    fn deserialize(preimage: [Field; RESULT_NOTE_LEN]) -> Self {\n        ResultNote {\n            owner: AztecAddress::new(preimage[0]),\n            sender: AztecAddress::new(preimage[1]),\n            bet_id: preimage[2],\n            result: preimage[3] as bool,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.sender.address,\n            self.bet_id,\n            self.result as Field\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let _ = self;\n        0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; RESULT_NOTE_LEN]) -> ResultNote {\n    ResultNote::deserialize(preimage)\n}\n\nfn serialize(note: ResultNote) -> [Field; RESULT_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ResultNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ResultNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ResultNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ResultNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ResultNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ResultNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/shaito/wonderland/aztec-coin-toss/src/types/result_note.nr"
      },
      "156": {
        "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\nstruct AccountsBroadcastEscrowNoteForStruct {\n  address: Field,\n}\n\nstruct FromBurnPublicStruct {\n  address: Field,\n}\n\nstruct FromEscrowStruct {\n  address: Field,\n}\n\nstruct OwnerEscrowStruct {\n  address: Field,\n}\n\nstruct ToMintPublicStruct {\n  address: Field,\n}\n\nstruct ToRedeemShieldStruct {\n  address: Field,\n}\n\nstruct NewAdminSetAdminStruct {\n  address: Field,\n}\n\nstruct MinterSetMinterStruct {\n  address: Field,\n}\n\nstruct OwnerSettleEscrowStruct {\n  address: Field,\n}\n\nstruct RecipientSettleEscrowStruct {\n  address: Field,\n}\n\nstruct FromShieldStruct {\n  address: Field,\n}\n\nstruct FromTransferStruct {\n  address: Field,\n}\n\nstruct ToTransferStruct {\n  address: Field,\n}\n\nstruct FromTransferPublicStruct {\n  address: Field,\n}\n\nstruct ToTransferPublicStruct {\n  address: Field,\n}\n\nstruct FromUnshieldStruct {\n  address: Field,\n}\n\nstruct ToUnshieldStruct {\n  address: Field,\n}\n\n\n// Interface for calling Token functions from a private context\nstruct TokenPrivateContextInterface {\n  address: Field,\n}\n\nimpl TokenPrivateContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn broadcast_escrow_note_for(\n    self,\n    context: &mut PrivateContext,\n    accounts: [AccountsBroadcastEscrowNoteForStruct;4],\n    randomness: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = accounts[0].address;\n    serialized_args[1] = accounts[1].address;\n    serialized_args[2] = accounts[2].address;\n    serialized_args[3] = accounts[3].address;\n    serialized_args[4] = randomness;\n\n    context.call_private_function(self.address, 0x2426c148, serialized_args)\n  }\n  \n\n  pub fn burn_public(\n    self,\n    context: &mut PrivateContext,\n    from: FromBurnPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_public_function(self.address, 0xb0e964d5, serialized_args)\n  }\n  \n\n  pub fn escrow(\n    self,\n    context: &mut PrivateContext,\n    from: FromEscrowStruct,\n    owner: OwnerEscrowStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = owner.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x54f7b220, serialized_args)\n  }\n  \n\n  pub fn mint_private(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secret_hash: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x10763932, serialized_args)\n  }\n  \n\n  pub fn mint_public(\n    self,\n    context: &mut PrivateContext,\n    to: ToMintPublicStruct,\n    amount: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n\n    context.call_public_function(self.address, 0x6bfd1d5b, serialized_args)\n  }\n  \n\n  pub fn redeem_shield(\n    self,\n    context: &mut PrivateContext,\n    to: ToRedeemShieldStruct,\n    amount: Field,\n    secret: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret;\n\n    context.call_private_function(self.address, 0xb77168f2, serialized_args)\n  }\n  \n\n  pub fn set_admin(\n    self,\n    context: &mut PrivateContext,\n    new_admin: NewAdminSetAdminStruct\n  ) {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = new_admin.address;\n\n    context.call_public_function(self.address, 0x41b90896, serialized_args)\n  }\n  \n\n  pub fn set_minter(\n    self,\n    context: &mut PrivateContext,\n    minter: MinterSetMinterStruct,\n    approve: bool\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = minter.address;\n    serialized_args[1] = approve as Field;\n\n    context.call_public_function(self.address, 0x7f020b80, serialized_args)\n  }\n  \n\n  pub fn settle_escrow(\n    self,\n    context: &mut PrivateContext,\n    owner: OwnerSettleEscrowStruct,\n    recipient: RecipientSettleEscrowStruct,\n    randomness: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = owner.address;\n    serialized_args[1] = recipient.address;\n    serialized_args[2] = randomness;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x510f50d4, serialized_args)\n  }\n  \n\n  pub fn shield(\n    self,\n    context: &mut PrivateContext,\n    from: FromShieldStruct,\n    amount: Field,\n    secret_hash: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret_hash;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x1d24add0, serialized_args)\n  }\n  \n\n  pub fn transfer(\n    self,\n    context: &mut PrivateContext,\n    from: FromTransferStruct,\n    to: ToTransferStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0xb1aa668a, serialized_args)\n  }\n  \n\n  pub fn transfer_public(\n    self,\n    context: &mut PrivateContext,\n    from: FromTransferPublicStruct,\n    to: ToTransferPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x7db8f449, serialized_args)\n  }\n  \n\n  pub fn unshield(\n    self,\n    context: &mut PrivateContext,\n    from: FromUnshieldStruct,\n    to: ToUnshieldStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x78303b89, serialized_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling Token functions from a public context\nstruct TokenPublicContextInterface {\n  address: Field,\n}\n\nimpl TokenPublicContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn burn_public(\n    self,\n    context: PublicContext,\n    from: FromBurnPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_public_function(self.address, 0xb0e964d5, serialized_args)\n  }\n  \n\n  pub fn mint_private(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secret_hash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x10763932, serialized_args)\n  }\n  \n\n  pub fn mint_public(\n    self,\n    context: PublicContext,\n    to: ToMintPublicStruct,\n    amount: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n\n    context.call_public_function(self.address, 0x6bfd1d5b, serialized_args)\n  }\n  \n\n  pub fn set_admin(\n    self,\n    context: PublicContext,\n    new_admin: NewAdminSetAdminStruct\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = new_admin.address;\n\n    context.call_public_function(self.address, 0x41b90896, serialized_args)\n  }\n  \n\n  pub fn set_minter(\n    self,\n    context: PublicContext,\n    minter: MinterSetMinterStruct,\n    approve: bool\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = minter.address;\n    serialized_args[1] = approve as Field;\n\n    context.call_public_function(self.address, 0x7f020b80, serialized_args)\n  }\n  \n\n  pub fn shield(\n    self,\n    context: PublicContext,\n    from: FromShieldStruct,\n    amount: Field,\n    secret_hash: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret_hash;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x1d24add0, serialized_args)\n  }\n  \n\n  pub fn transfer_public(\n    self,\n    context: PublicContext,\n    from: FromTransferPublicStruct,\n    to: ToTransferPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x7db8f449, serialized_args)\n  }\n  \n}\n  \n  \n",
        "path": "/home/shaito/wonderland/aztec-coin-toss/src/types/token.nr"
      }
    }
  }
}