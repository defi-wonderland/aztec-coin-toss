{
  "name": "CoinToss",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet_amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "divinity",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "private_oracle",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "house",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_bet",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_bet_amount_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::bet_amount_note::BetAmountNote",
          "fields": [
            {
              "name": "amount",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_divinity_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::address_note::AddressNote",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_house_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::address_note::AddressNote",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_private_oracle_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::address_note::AddressNote",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_user_bets_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::bet_note::BetNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "randomness",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "bet",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzlmMFqwzAQRP9F51Ck1Ura9a+UHkKbQiAkpckt+N9rU0sKdFGwi22FnOLAKDyNldmxr+pwet9e9qfjWTVXZVXzelXnr+2x/3a+bL8vqtEbtTt+dJ/tRn3uDzvVmHbzR2WsdTwou2sySW2dJEfQGOUI/o6crRvETDZLuX3bKHxEaLcgdKdJ0JZpOrSXoIEprrDacRmdHQxa0CZvM0hiSrtk77N0LHR4RGj6LzRo9hEaEMvQgcygJQhJihI0UjykTmdoB5JvBOnPQpiPHZFkRsI12tuyNmD83UCQjet941p9cyb55nXZN/Ah0t6cNhRdKxwhoxf1gm30gm8ipvOiRzEroRh9c0gHFpBYrLHx/ljQd/J3hTww4mSunloczWOoq4gxTNOWwk00sSTWkHKsuy6LCzlmxH5Qg3MrBJlYO2bzohhkYplYAEUKMrEjWCAbWax39UWCOKFrpwZxlo6hftYgA3H01+Dc8kEGcvWYy4tSkIHcJ+ZHEYIM5JaAOVSRsb5IkCd07dTyLB1B/bRBJo/+CpxbIcjk6jGXF8Ugk/vE/ChSI9Mv8nOa4/gCzpv8ti5wXCQG4L1FYv6gj3txmG+wx98ePQXPT8HzE/AAJuD1i0bj9YvG49EUPJqCR6Px2vYHvUv0FA==",
      "eJztlctqwzAQAP9FZxO0D2m1/pWSg2lTCASn1L4Z/3vt1lobKmLaQ9pCT0lgVozGjjS4y/Wx6c/XtnP14NjVD4PrXpp2/tX1zWvval+5U/s0fY6Vez5fTq6GsfpEAVHQhZy+JzCaQgln9JxxxriDK4UF1kQrquOxcuEvSsc7Sk+MSZOm70tLSZrEmpCg3lQXzFsUjEYmmRdP5cVJbfG00wXR9rndpnDJJMHCJhRDuVSEU5YOfi0SsIAixbiwSOq3Oyz5cjBfSbdh4RxZEq6PZQ6nvzVcAAsX/U64KNkWVpTTF19Q8P8trAXctYVSbqEbdGoxq+APqYDf/GM/XORQvC/A2wywjUwn/HvJA1BpKGiWirCewqJ5qHid7g0V9djOlcBrqcjjcRzfAIoBRu4=",
      "",
      "",
      "eJzt3d+O5MqN4OF36WtjkAwy/vlVBnth7HiAAQaexdp3xnn3kYHO6jYO1RFFqRQ/p/LKx0CyRUlMlkTlF/r7t//+n//7p7/91//85a/f/vj3b49/69/++O9///bX//env/zj///1b3/6/3/79sfHH779+S//sf3vb3/49p//9d9//vZH+e0Pv/tUMin6/ZPbf9f68Wltzse3Dzw//PjxD2v67f/8YctDHpREhJJIoiSilESMkkimJFIoiVRKIo2SCKWzJkpnTZTOmiidNVE6a6J01kTprInSWROlsyZKZ02UzqqUzqqUzqqUzqqUzqqUzqqUzqqUzqqUzqqUzqqUzmqUzmqUzmqUzmqUzmqUzmqUzmqUzmqUzmqUzmqUzpopnTVTOmumdNZM6ayZ0lkzpbNmSmfNlM6aKZ01UzproXTWQumshdJZC6WzFkpnLZTOWiidtVA6a6F01kLprJXSWSuls1ZKZ62UzlopnbVSOmuldNZK6ayV0lkrpbM2SmdtlM7aKJ21UTpro3TWRumsjdJZG6WzNkpnbZTO2imdtVM6a6d01k7prJ3SWTuls3ZKZ+2UztopnbVTOqs8KK1VHpTeKg9Kc5UHpbvKg9Je5UHpr/KgNFh5UDqsPCgtVh6YHgviWJgeywFZHJHFIVkck8VBWRyVxWFZGJclGJglGJklGJolGJslGJwlGJ0lGJ4lGJ8lGKAlGKElGKIlGKMlGKQlGKUlGKYlGKclGKglGKklGKolGKslGKwlGK0lGK4lGK8lGLAlGLElGLIlGLMlGLQlGLUlGLYlGLclGLglGLklGLolGLslGLwlGL0lGL4lGL8lGMAlGMElGMIlGMMlGMQlGMUlGMYlGMclGMglGMklGMolGMslGMwlGM0lGM4lGM8lGNAlGNElGNIlGNMlGNQlGNUlGNYlGNclGNglGNklGNolGNslGNwlGN0lGN4lGN8lGOAlGOElGOIlGOMlGOQlGOUlGOYlGOeVMM4rYZxXwjivhHFe6UHpsQnjvBLGeSWM80oY55UwzithnFfCOK+EcV4J47wSxnkljPNKGOeVMM4rYZxXwjivhHFeCeO8EsZ5JYzzShjnlTDOK2GcV8I4r4RxXgnjvBLGeSWM80oY55UwzithnFfCOK+EcV4J47wSxnkljPNKGOeVMM4rYZxXwjivhHFeCeO8EsZ5JYzzShjnlTDOK2GcV8I4r4RxXgnjvBLGeSWM80oY55UwzithnFfCOK+EcV4J47wSxnkljPNKGOeVMM4rYZxXwjivhHFeCeO8EsZ5JYzzShjnlTDOK2GcV8I4r4RxXgnjvBLGeSWM80oY55UwzithnFfCOK+EcV4J47wSxnkljPNKGOeVMM4rYZxXwjivhHFeCeO8EsZ5JYzzShjnlTDOK2GcV8I4L8U4L8U4L8U4L8U4L31QeqxinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdinJdhnJdhnJdhnJdhnJc9KD3WMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM7LMM4rY5xXxjivjHFeGeO88oPSYzPGeWWM88oY55UxzitjnFfGOK+McV4Z47wyxnlljPPKGOeVMc4rY5xXxjivjHFeGeO8MsZ5ZYzzyhjnlTHOK2OcV8Y4r4xxXhnjvDLGeWWM88oY55UxzitjnFfGOK+McV4Z47wyxnlljPPKGOeVMc4rY5xXxjivjHFe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YI9uYmJG+M+beMaNa9SPG9eoF5cmZoR+3LhG/bjP1ugz7rOF94z7bDU94z5bIs+4cU/z42L1kiZmhH5csF4mZoR+XLBeJmaEflywXiZmhH6cWy/b91K+xyVNPxamKPYR59bLRJxbLxNxbr1MxLn1Mo7zZ4QTcW69TMS59TIR59bLRJxbLxNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevFnhBNxwXrxZ4QTccF68WeEE3HBevGneRNxwXrxfwM6EResF/83oBNxwXrxfwM6EResF/83oBNxwXrxfwM6EResF/83oBNxwXrx57sTcbF6UX++OxEXqxf157sTcbF6UX++OxEXqxf157sTcbF6UX++OxEXrBd/vjsRF6wXf747EResF3++OxEXrJfgfFeD810Nznc1ON/V4HxXg/NdDc53NTjf1eB8V4PzXQ3OdzU439XgfFeD810Nznc1ON/V4HxXg/NdDc53NTjf1eB8V4PzXQ3OdzU439XgfFeD810Nznc1ON/V4HxXg/NdDc53NTjf1eB8V4PzXQ3OdzU439XgfFeD810Nznc1ON/V4HxXg/NdDc53NTjf1eB8V4PzXQ3OdzU439XgfFeD810Nznc1ON/V4HxXg/NdDc53NTjf1eB8V4PzXQ3OdzU439XgfFeD810Nznc1ON/V4HxXg/NdDc53NTjf1eB8V4PzXQ3OdzU439XgfFeD810Nznc1ON/V4HxXg/NdDc53NTjf1eB8V4PzXQ3OdzU437XgfNeC810LznctON+14HzXgvNdC853LTjfteB814LzXQvOdy0437XgfNeC810LznctON+14HzXgvNdC853LTjfteB814LzXQvOdy0437XgfNeC810LznctON+14HzXgvNdC853LTjfteB814LzXQvOdy0437XgfNeC810LznctON+14HzXgvNdC853LTjftZ35rlr5iMvZi/PrZRzn18s4zq+Xn+NK8uL8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",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\ncontract CoinToss {\n    use dep::aztec::context::Context;\n    use crate::types::bet_note::{BetNote, BetNoteMethods, BET_NOTE_LEN};\n    use crate::types::bet_amount_note::{BetAmountNote, BetAmountNoteMethods, BET_AMOUNT_NOTE_LEN};\n    use crate::types::address_note::{AddressNote, AddressNoteMethods, ADDRESS_NOTE_LEN};\n\n    use dep::aztec::note::{\n        note_getter_options::NoteGetterOptions,\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        note_viewer_options::NoteViewerOptions,\n        utils as note_utils\n    };\n\n    use dep::std::option::Option;\n\n    use dep::aztec::log::emit_encrypted_log;\n    use dep::aztec::oracle::{\n        get_public_key::get_public_key,\n        rand::rand\n    };\n    use dep::aztec::state_vars::{\n        public_state::PublicState,\n        map::Map,\n        set::Set,\n        singleton::Singleton,\n        immutable_singleton::ImmutableSingleton\n    };\n    use dep::aztec::selector::compute_selector;\n\n    use dep::aztec::types::type_serialization::field_serialization::{ FieldSerializationMethods, FIELD_SERIALIZED_LEN};\n    use dep::aztec::types::type_serialization::aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n    use dep::aztec::types::address::AztecAddress;\n\n\n    global BET_AMOUNT_SLOT = 1;\n    global DIVINITY_ADDRESS_SLOT = 2;\n    global PRIVATE_ORACLE_ADDRESS_SLOT = 3;\n    global HOUSE_ADDRESS_SLOT = 4;\n    global BETS_SLOT = 5;\n\n\n    struct Storage {\n        bet_amount: ImmutableSingleton<BetAmountNote, BET_AMOUNT_NOTE_LEN>,\n        divinity: ImmutableSingleton<AddressNote, ADDRESS_NOTE_LEN>,\n        private_oracle: ImmutableSingleton<AddressNote, ADDRESS_NOTE_LEN>,\n        house: ImmutableSingleton<AddressNote, ADDRESS_NOTE_LEN>,\n        bets: Set<BetNote, BET_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                bet_amount: ImmutableSingleton::new(\n                    context,\n                    BET_AMOUNT_SLOT,\n                    BetAmountNoteMethods,\n                ),\n                divinity: ImmutableSingleton::new(\n                    context,\n                    DIVINITY_ADDRESS_SLOT,\n                    AddressNoteMethods,\n                ),\n                private_oracle: ImmutableSingleton::new(\n                    context,\n                    PRIVATE_ORACLE_ADDRESS_SLOT,\n                    AddressNoteMethods,\n                ),\n                house: ImmutableSingleton::new(\n                    context,\n                    HOUSE_ADDRESS_SLOT,\n                    AddressNoteMethods,\n                ),\n                bets: Set::new(context, BETS_SLOT, BetNoteMethods)\n            }\n        }\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    fn constructor(bet_amount: Field, divinity: AztecAddress, private_oracle: AztecAddress, house: AztecAddress) {\n        let mut bet_amount_note = BetAmountNote::new(bet_amount);\n        storage.bet_amount.initialize(&mut bet_amount_note, Option::none(), false);\n\n        let mut divinity_note = AddressNote::new(divinity);\n        storage.divinity.initialize(&mut divinity_note, Option::none(), false);\n\n        let mut private_oracle_note = AddressNote::new(private_oracle);\n        storage.private_oracle.initialize(&mut private_oracle_note, Option::none(), false);\n\n        let mut house_note = AddressNote::new(house);\n        storage.house.initialize(&mut house_note, Option::none(), false);\n    }\n\n    #[aztec(private)]\n    fn create_bet(bet: bool) {\n        let sender = AztecAddress::new(context.msg_sender());\n        // let house = storage.house.get_note();\n\n        let mut user_bet: BetNote = BetNote::new(sender, bet);\n        storage.bets.insert(&mut user_bet, false);\n\n        // // TODO: should check for funds availability\n        // let mut house_bet: BetNote = BetNote::new(house, !bet);\n        // storage.bets.insert(&mut house_bet, true);\n    }\n\n    // Returns the bet amount\n    unconstrained fn get_bet_amount_unconstrained() -> BetAmountNote {\n        storage.bet_amount.get_note()\n    }\n\n    // Returns the divinity address\n    unconstrained fn get_divinity_unconstrained() -> AddressNote {\n        storage.divinity.get_note()\n    }\n\n    // Returns the private oracle address\n    unconstrained fn get_private_oracle_unconstrained() -> AddressNote {\n        storage.private_oracle.get_note()\n    }\n\n    // Returns the house address\n    unconstrained fn get_house_unconstrained() -> AddressNote {\n        storage.house.get_note()\n    }\n\n    unconstrained fn get_user_bets_unconstrained(user: AztecAddress, start_offset: u32) -> [Option<BetNote>; 10] {\n        // MAX_NOTES_PER_PAGE == 10\n        // https://github.com/AztecProtocol/aztec-packages/blob/2d498b352364debf59af940f0a69c453651a4ad0/yarn-project/aztec-nr/aztec/src/constants_gen.nr#L53\n\n        // create the filter - limiting to 10 for future compatibility\n        let user_bets_getter_option = NoteViewerOptions::new().select(0, user.address).set_offset(start_offset).set_limit(10);\n\n        // filter the notes and return the answer-\n        storage.bets.view_notes(user_bets_getter_option)\n    }\n\n    // Computes note hash and nullifier.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; BET_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n\n        if(storage_slot == BET_AMOUNT_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(BetAmountNoteMethods, note_header, preimage)\n        } else if(storage_slot == BETS_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(BetNoteMethods, note_header, preimage)\n        }\n         else {\n            note_utils::compute_note_hash_and_nullifier(AddressNoteMethods, note_header, preimage)\n        }\n    }\n}",
        "path": "/Users/ngng/code/ng/aztec-coin-toss/src/main.nr"
      },
      "3": {
        "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n",
        "path": "std/hash.nr"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/aztec/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "45": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/aztec/note/lifecycle.nr"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/aztec/note/note_getter.nr"
      },
      "48": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    serialized_note: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "61": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/aztec/oracle/rand.nr"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/aztec/oracle/notes.nr"
      },
      "71": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "74": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    } else {\n        pedersen_hash(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/aztec/types/vec.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/aztec/utils.nr"
      },
      "87": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress,\n    }\n};\n\nstruct BetNote {\n    owner: AztecAddress,\n    randomness: Field,\n    bet: bool, // Heads is 0 (False). Tails is 1 (True).\n    header: NoteHeader\n}\n\nglobal BET_NOTE_LEN: Field = 3;\n\nimpl BetNote {\n    pub fn new(_owner: AztecAddress, _bet: bool) -> Self {\n        BetNote {\n            owner: _owner,\n            randomness: rand(),\n            bet: _bet,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; BET_NOTE_LEN] {\n        [self.owner.address, self.randomness, self.bet as Field]\n    }\n\n    fn deserialize(preimage: [Field; BET_NOTE_LEN]) -> Self {\n        BetNote {\n            owner: AztecAddress::new(preimage[0]),\n            randomness: preimage[1],\n            bet: preimage[2] as bool,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.randomness,\n            self.bet as Field\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(BetNoteMethods, self);\n        let secret = get_secret_key(self.owner.address);\n        dep::std::hash::pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ])\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; BET_NOTE_LEN]) -> BetNote {\n    BetNote::deserialize(preimage)\n}\n\nfn serialize(note: BetNote) -> [Field; BET_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BetNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BetNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BetNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BetNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BetNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BetNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/ngng/code/ng/aztec-coin-toss/src/types/bet_note.nr"
      },
      "88": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress\n    }\n};\n\nstruct BetAmountNote {\n    amount: Field,\n    header: NoteHeader\n}\n\nglobal BET_AMOUNT_NOTE_LEN: Field = 1;\n\nimpl BetAmountNote {\n    pub fn new(_amount: Field) -> Self {\n        BetAmountNote {\n            amount: _amount,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; BET_AMOUNT_NOTE_LEN] {\n        [self.amount]\n    }\n\n    fn deserialize(preimage: [Field; BET_AMOUNT_NOTE_LEN]) -> Self {\n        BetAmountNote {\n            amount: preimage[0],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.amount,\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n         let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n         0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        // no owner == no broadcast\n        let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n        let __ = context;\n        let ___ = slot;\n    }\n}\n\nfn deserialize(preimage: [Field; BET_AMOUNT_NOTE_LEN]) -> BetAmountNote {\n    BetAmountNote::deserialize(preimage)\n}\n\nfn serialize(note: BetAmountNote) -> [Field; BET_AMOUNT_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BetAmountNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BetAmountNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BetAmountNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BetAmountNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BetAmountNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BetAmountNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/ngng/code/ng/aztec-coin-toss/src/types/bet_amount_note.nr"
      },
      "89": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress\n    }\n};\n\nstruct AddressNote {\n    address: AztecAddress,\n    header: NoteHeader\n}\n\nglobal ADDRESS_NOTE_LEN: Field = 1;\n\nimpl AddressNote {\n    pub fn new(_address: AztecAddress) -> Self {\n        AddressNote {\n            address: _address,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; ADDRESS_NOTE_LEN] {\n        [self.address.address]\n    }\n\n    fn deserialize(preimage: [Field; ADDRESS_NOTE_LEN]) -> Self {\n        AddressNote {\n            address: AztecAddress::new(preimage[0]),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.address.address,\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n         let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n         0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        // no owner == no broadcast\n        let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n        let __ = context;\n        let ___ = slot;\n    }\n}\n\nfn deserialize(preimage: [Field; ADDRESS_NOTE_LEN]) -> AddressNote {\n    AddressNote::deserialize(preimage)\n}\n\nfn serialize(note: AddressNote) -> [Field; ADDRESS_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: AddressNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: AddressNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: AddressNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut AddressNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: AddressNote) {\n    note.broadcast(context, slot);\n}\n\nglobal AddressNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/ngng/code/ng/aztec-coin-toss/src/types/address_note.nr"
      }
    }
  }
}