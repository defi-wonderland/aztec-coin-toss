{
  "name": "CoinToss",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet_amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "divinity",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "private_oracle",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "house",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_bet",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "bet",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_bet_amount_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::bet_amount_note::BetAmountNote",
          "fields": [
            {
              "name": "amount",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_divinity_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::address_note::AddressNote",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_house_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::address_note::AddressNote",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_private_oracle_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::address_note::AddressNote",
          "fields": [
            {
              "name": "address",
              "type": {
                "kind": "struct",
                "path": "aztec::types::address::AztecAddress",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_user_bets_unconstrained",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "user",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "start_offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 10,
          "type": {
            "kind": "struct",
            "path": "std::option::Option",
            "fields": [
              {
                "name": "_is_some",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "_value",
                "type": {
                  "kind": "struct",
                  "path": "types::bet_note::BetNote",
                  "fields": [
                    {
                      "name": "owner",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "randomness",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "bet",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "header",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::note::note_header::NoteHeader",
                        "fields": [
                          {
                            "name": "contract_address",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "nonce",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "storage_slot",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "is_transient",
                            "type": {
                              "kind": "boolean"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "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MUpilVfHGCWxyqtjjJJY5dUxRkms8uoYoyRWeXWMURKrvDrGKIlVXh1jlMQqr44xSmKVV8cYJbHKq2OMkljl1TFGSazy6hijJFZ5dYxREqu8OoYosVjl1TFEicV+ro4hSiw2aXUMUWLxa5R1DFFi8WuUdYxREr9GWccYJfFrlHWMURK/RlnHGCWxe61jjJLYvdYxRknsXusYoyR2r3WMURK71zrGKIndax1jlMTutY4xSmL3WscYJbF7rWOMEuZejblXY+7VmHs15l6NuVdj7tWYezXmXo25V2Pu1Zh7NeZejblXY+7VmHs15l6NuVdj7tWYezXmXo25V2Pu1Zh7NeZejblXY+7VmHs15l6NuVdj7tWYezXmXo25V2Pu1Zh7NeZejblXY+7VmHs15l6NuVdj7tWYezXmXo25V2Pu1Zh7NeZejblXY+7VmHs15l6NuVdj7tWYezXmXo25V2Pu1Zh7NeZejblXY+7VmHs15l6NudfG3Gtj7rUx99qYe23MvTbmXhtzr42518bca2PutTH32ph7bcy9NuZeG3OvjbnXxtxrY+61MffamHttzL025l4bc6+NudfG3Gtj7rUx99qYe23MvTbmXhtzr42518bca2PutTH32ph7bcy9NuZeG3OvjbnXxtxrY+61MffamHttzL025l4bc6+NudfG3Gtj7rUx99qYe23MvTbmXhtzr42518bca2PutTH32ph7bcy9NuZeG3OvLXGv4/prkTq2FsRiSspYTEkZiyk5j00axGJKylhMyXjqSRuGIBZTUsUS91rGYkoOC/0ldrhNBLGYkjIWX7cyFl+3MhZ/2aSnH8TVs69/1ljymXcZi79sKmPxl01lLP6yqYzFcB0mwrUnp2DgJDKujCVwncV6D2LxpOC2fLWl3qcgFsNVxmK4XPV6LJ4Uylg8KczDGptVglh83YrYlOixeVonhTlo5JTosTIWTwpzs1Ps8nJPiR4rYzEl5zG/ZHJK9FgZiz/llBWuUabL6XVKTngsY/GnnGUsnvBE7BT7gpLL756rGWRKjoPct454Kt23jnje3beOeJLet45wGOxcR/z58751JANs1zqS0bhrHcnQ3bWOB4zz5BSAfet4wDhPzhfYt44HjPPk5IJ963jAOE/ORNi3jrePD5H5WFb0VMNhZfC5huT0gz1reDtTYuNSg1lQw9uJqmp4O09V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q8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvI7LyKzM6ryOy8iszOq8jsvIrMzqvK7LyqzM6ryuy8qszOq75Uztgqs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz86oyO68qs/OqMjuvKrPzqjI7ryqz82oyO68ms/NqMjuvJrPzai+VM7bJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvJrMzqvJ7LyazM6ryey8mszOq8nsvLrMzqvL7Ly6zM6ry+y8+kvljO0yO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7ry6z8+oyO68us/PqMjuvLrPz6jI7L5fZebnMzstldl4us/Pyl8oZ6zI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8XGbn5TI7L5fZebnMzstldl4us/NymZ2Xy+y8hszOa8jsvIbMzmvI7LzGS+WMHTI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz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uxX6boW+W6HvVui7Ffpuhb5boe9W6LsV+m6Fvluh71bouxX6boW+W6HvVui7Ffpuhb5boe9W6LsV+m6Fvluh71bouxX6boW+W6HvVui7Ffpuhb5boe9W6LsV+m6Fvluh71bouxX6boW+W6HvVui7Ffpuhb5boe9W6LsV+m6Fvluh71bouxX6boW+W6HvVui7Ffpug77boO826LsN+m6Dvtug7zbouw36boO+26DvNui7Dfpug77boO826LsN+m6Dvtug7zbouw36boO+26DvNui7Dfpug77boO826LsN+m6Dvtug7zbouw36boO+26DvNui7Dfpug77boO826LsN+m6Dvtug7zbouw36boO+26DvNui7Dfpug77boO826LsN+m6Dvtug7zbouw36boO+26DvNui7Dfpug77boO826LsN+m6Dvtug7zbouw36boO+26DvNui7Dfpug77boO826LsN+m6Dvtug7zbouw36boO+26DvNui7Dfpug77boO826LsN+m6Dvtug7zbouw36boO+26DvNui7Dfpug77boO826LsN+m6Hvtuh73boux36boe+26Hvdui7Hfpuh77boe926Lsd+m6Hvtuh73boux36boe+26Hvdui7Hfpuh77boe926Lsd+m6Hvtuh73boux36boe+26Hvdui7Hfpuh77boe926Lsd+m6Hvtuh73boux36boe+26Hvdui7Hfpuh77boe926Lsd+m6Hvtuh73boux36boe+26Hvdui7Hfpuh77boe926Lsd+m6Hvtuh73boux36boe+26Hvdui7Hfpuh77boe926Lsd+m6Hvtuh73boux36boe+26Hvdui7Hfpuh77boe926Lsd+m6Hvtuh73boux36boe+26Hvdui7Hfpuh77boe926Lsd+m6Hvtuh73boux36rkPfdei7Dn3Xoe869F2HvuvQdx36rkPfdei7Dn3Xoe869F2HvuvQdx36rkPfdei7Dn3Xoe869F2HvuvQdx36rkPfdei7Dn3Xoe869F2HvuvQdx36rkPfdei7Dn3Xoe869F2HvuvQdx36rkPfdei7Dn3Xoe869F2HvuvQdx36rkPfdei7Dn3Xoe869F2HvuvQdx36rkPfdei7Dn3Xoe869F2HvuvQdx36rt/47ohyF30Jcxd9CXMXfQlzF30Jcxd9iXI3vhvmLvoS5i76EuYu+hLmYF9ufDfMwb7c+G6Yg3258d0od+O7YQ725cJ3m/+Y++k3v3ifUb/82p16/6W1vF8ir9anL5G38NOXyAv72UtcGOGvL/GWyzsa5/KORrlxYYRxLuxob33+kuv99f37sv8n3nJhRy9yYfEucmGbLnJhRS5y4Zl2kQv7cpEL+3KRC/uS52IjvMjBvsRGeJGDfYmN8CIH+xIb4UUO9iU2wosc7EtshBc52JfYCC9ysC+xEV7kYF9iI7zIwb7ERniRg32JjfAiB/sSG+FFDvYlNsKLHOxLbIQXOdiX2AgvcrAvsRFe5GBfYiO8yMG+xEZ4kYN9iY3wIgf7EhvhRQ72JTbCixzsS2yEFznYl9gIL3KwL7ERXuRgX2IjvMjBvsRGeJGDfYmN8CIH+xIb4UUO9iU2wosc7EtshBc52JfYCC9ysC+xEV7kYF9iI7zIwb7ERniRg32JjfAiB/sSG+FFDvYlNsKLHOxLrHkXOdiX+B3QixzsS/wO6EUO9iV+B/QiB/sSvwN6kYN9id8BvcjBvsTvgF7kYF9i373Isb7M2HcvcqwvE/ruhL47oe9O6LsT+u6Evjuh707ouxP67oS+O6HvTui7E/ruhL47oe9O6LsT+u6Evjuh707ouxP67oS+O6HvTui7E/ruhL47oe9O6LsT+u6Evjuh707ouxP67oS+O6HvTui7E/ruhL47oe9O6LsT+u6Evjuh707ouxP67oS+O6HvTui7E/ruhL47D77rr/GW89eMcnFf8lzclzwX9yXPxX3Jc3Ff8lzclzwX9yXNHXzX23tu1VeUi/uS5w59SXOHvqS5Q1/S3KEvae7QlzR36EuaO/QlzR36kuUOvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnYF8OvpvnWF/WwXfzHOvLOvhunmN9WQffzXOsL+vgu3mO9WUdfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb4cfDfPwb6cfDfNwb6cfDfNwb6cfDfNwb6cfDfNwb5A313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03cV8t7yY7+4c6svOob7sHOrLzqG+7Bzqy86hvuwc6svOob7sHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnWF4O+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd8t0HcL9N0CfbdA3y3Qdwv03QJ9t0DfLdB3C/TdAn23QN8t0HcL9N0CfbdA3y3Qdwv03QJ9t0DfLdB3C/TdAn23QN8t0HcL9N0CfbdA3y3Qdwv03QJ9t0DfLdB3C/TdAn23QN8t0HcL9N0CfbdA3y3Qdwv03QJ9t0DfLdB3C/TdAn23QN8t0HcL9N0CfbdA3y3Qdwv03QJ9t0DfLdB3C/TdAn23QN8t0HcL9N0CfbdA3y3Qdwv03QJ9t0DfLdB3C/TdAn23QN8t0HcL9N0CfbdA3y3Qdwv03QJ9t0DfLdB3C/TdAn23QN8t0HcL9N0CfbdA3y3Qdwv03QJ9t0DfLdB3C/TdAn23QN8t0HcL9N0CfbdA363Qdyv03Qp9t0LfrdB3K/TdCn23Qt+t0Hcr9N0KfbdC363Qdyv03Qp9t0LfrdB3K/TdCn23Qt+t0Hcr9N0KfbdC363Qdyv03Qp9t0LfrdB3K/TdCn23Qt+t0Hcr9N0KfbdC363Qdyv03Qp9t0LfrdB3K/TdCn23Qt+t0Hcr9N0KfbdC363Qdyv03Qp9t0LfrdB3K/TdCn23Qt+t0Hcr9N0KfbdC363Qdyv03Qp9t0LfrdB3K/TdCn23Qt+t0Hcr9N0KfbdC363Qdyv03Qp9t0LfrdB3K/TdCn23Qt+t0Hcr9N0KfbdC363Qdyv03Qp9t0LfrdB3K/TdCn23Qt+t0Hcr9N0KfbdC363Qdyv03Qp9t0LfbdB3G/TdBn23Qd9t0Hcb9N0GfbdB323Qdxv03QZ9t0HfbdB3G/TdBn23Qd9t0Hcb9N0GfbdB323Qdxv03QZ9t0HfbdB3G/TdBn23Qd9t0Hcb9N0GfbdB323Qdxv03QZ9t0HfbdB3G/TdBn23Qd9t0Hcb9N0GfbdB323Qdxv03QZ9t0HfbdB3G/TdBn23Qd9t0Hcb9N0GfbdB323Qdxv03QZ9t0HfbdB3G/TdBn23Qd9t0Hcb9N0GfbdB323Qdxv03QZ9t0HfbdB3G/TdBn23Qd9t0Hcb9N0GfbdB323Qdxv03QZ9t0HfbdB3G/TdBn23Qd9t0Hcb9N0GfbdB323Qdxv03QZ9t0HfbdB3G/TdBn23Qd/t0Hc79N0OfbdD3+3Qdzv03Q59t0Pf7dB3O/TdDn23Q9/t0Hc79N0OfbdD3+3Qdzv03Q59t0Pf7dB3O/TdDn23Q9/t0Hc79N0OfbdD3+3Qdzv03Q59t0Pf7dB3O/TdDn23Q9/t0Hc79N0OfbdD3+3Qdzv03Q59t0Pf7dB3O/TdDn23Q9/t0Hc79N0OfbdD3+3Qdzv03Q59t0Pf7dB3O/TdDn23Q9/t0Hc79N0OfbdD3+3Qdzv03Q59t0Pf7dB3O/TdDn23Q9/t0Hc79N0OfbdD3+3Qdzv03Q59t0Pf7dB3O/TdDn23Q9/t0Hc79N0OfbdD3+3Qdzv03Q59t0Pf7dB3O/TdDn23Q9/t0Hc79N0OfbdD33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvTdAX13QN8d0HcH9N0BfXdA3x3Qdwf03QF9d0DfHdB3B/TdAX13QN8d0HcH9N0BfXdA3x3Qdwf03QF9d0DfHdB3B/TdAX13QN8d0HcH9N0BfXdA3x3Qdwf03QF9d0DfHdB3B/TdAX13QN8d0HcH9N0BfXdA3x3Qdwf03QF9d0DfHdB3B/TdAX13QN8d0HcH9N0BfXdA3x3Qdwf03QF9d0DfHdB3B/TdAX13QN8d0HcH9N0BfXdA3x3Qdwf03QF9d0DfHdB3B/TdAX13QN8d0HcH9N0BfXdA3x3Qdwf03QF9d0DfHdB3B/TdAX13QN8d0HcH9N0BfXdA3x3Qdwf03QF9d0DfHdB3B/TdAX13QN8d0HcH9N0JfXdC353Qdyf03Ql9d0LfndB3J/TdCX13Qt+d0Hcn9N0JfXdC353Qdyf03Ql9d0LfndB3J/TdCX13Qt+d0Hcn9N0JfXdC353Qdyf03Ql9d0LfndB3J/TdCX13Qt+d0Hcn9N0JfXdC353Qdyf03Ql9d0LfndB3J/TdCX13Qt+d0Hcn9N0JfXdC353Qdyf03Ql9d0LfndB3J/TdCX13Qt+d0Hcn9N0JfXdC353Qdyf03Ql9d0LfndB3J/TdCX13Qt+d0Hcn9N0JfXdC353Qdyf03Ql9d0LfndB3J/TdCX13Qt+d0Hcn9N0JfXdC353Qdyf03Ql9d0LfndB3J/TdCX13Qt+d0Hcn9N0JfXdC353Qdyf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/TdBX13Qd9d0HcX9N0FfXdB313Qdxf03QV9d0HfXdB3F/Pd+mK+u3OoLzuH+rJzqC87h/qyc6gvO4f6snOoLzuH+rJzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx351hfDPquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquxY7p+7//Jbf/7Ypy4fclz8WOeZELvy8XufD7cpEL7yM39/ecjygX3kcXufA+usiF99FFLryPLnKHvqS5Q1+yXOyYF7lDX9LcoS9pDvYldsyLHOxL7JgXOdiX2DEvcrAvsWN6eZW3XHnVKBf3Jc/FfclzcV/yXNyXPBf3Jc/FfclzcV/yXNyXPBf3Jc3FjnmRg32JHfMiB/sSO+ZFDvYldsyLHOxL7IpeSn/PVY9y8fezl/c/F/QS/bkgdr6LXPz9zHPx9zPPxd/PPBfff3kuvv/SXOx8F7n4/stz8f2X52BfYue7yMG+xM53kYN9iZ3vIsf6UmLnu8gd+uL2nvMS5Q59SXOHvqS5Q1/S3KEvae7QlzR36EuaO/QlzR36kuVi57vIwb7EzneRg32Jne8iB/sSO99FDvYldr48F/uZ99necyv480SJPctHe/9zyGhhLv6+5Ln4+5Ln4u9LnovvozQXe9ZFLr6P8lz888tz8X2U5+L7KM/BvsTvK17kYF8OzpfnYF8OzpfnYF8OzpfnYF8OzpfnYF8Of39Pz7PD39/zXNwzt/e/V3n5lb/8RP5PxaV8+CJxg5+9yIERHr5IfG88fJH4Rnr4IvFd9/BF4lv04YvE9+XDF4lv4ocv8nvc8fFrZ09f5PN3fFlvf5+s9v2x2Vhvlziw06OX+PzdXq2+XaLM6BKfv9fTS3z+Tv/hGxVf4vP3eXqJz9/l6SU+f4+nl/j8HZ5e4vP3d63r7RI9vMTn7+7sEgeUfPQSD9zd2SUeuLuzS3z+7k4v8fm7O73E5+/u9BKfv7vTS3z+7k4v8fV398GFH7xEPZCut9f7JXr77R8r6oF089yhwWnuUMs0d+hamjsUaIz33JhR7tCKNHf4UWe5A+nmucORm+YOfUlzh76kuUNf0tyhL2nu0Jc0B/tyIN08B/sSv7p5kYN9OdBznoN9iV/dvMjBvhyoO8/BvhyoO8/BvhyoO8/BvhyoO8/BvhyoO8/BvhyoO8/BvhyoO8/BvhyoO8/BvkDqrpC6K6TuCqm7Hl5pzXPs0Ug9vNKa59ijkXp4pTXPsUcj9fBKa56DfTm80prnYF8Or7TmOdiXwyuteQ725fBKa56DfTm80prnYF8Or7TmOdiXwyOxPAf7cnjKledgXw7PovIc7MvhYU6egz/306uiySuf9fDsIc8dXi32979Pl/Grv09/nCROb7E+eYnDC8tPXuLwbvOTlzi8Bv3kJeJaPnqJw8vVT17i8B72k5c43IdPXuJwyz55ia+/uw+PEx69xOfv7uR5ZD08Tnj0Eg/c3X//eWQ9PE549BKfv7uTx2z18Djh0Ut8/u5OL/H5uzu9xOfv7uQS7fBG+oN3dzu8vP7oJb789+52eH7y6CW+/Pfudngq8+glvvz37nZ41vPoJb789+52eIL05CUOD5sevcTX392HR0plvlNjjdZ17fBIKc8dGpzmDrVMc4eupblDgbLc4ZFS/b5CqtGnCrTDI6U8F5/OeS4+cvNc3Jc8F/clz8V9yXNxX/Jc3Jc8F/clzR0eKeU52JfDI6U8B/tyeKSU52BfDo+U8hzsy+GRUp6DfTk8UspzsC+HR0p5Dvbl8Egpz8G+HB4p5TnYl8MjpTwH+3J4pJTnYF8Oj5TyHOzL4ZFSnoN9OTxS2n+mfcvtPzpEubgveS7uS56L+5LmDo+U8lzclzwX9yXPxX3Jc3Ff8lzclzwH+3J4pJTnYF8Oj5TS3OGRUp6DfTmMkPIc7MvhUVSeg305DHryHOzL4dFXnoN9OTzPynOwL4cnT3kO9uXwjCjPwb4cnubkuUNf/HtuBq8Ct8Nzlzx36EuWOzwhyXOHvqS5Q1/S3KEvae7wc09zh597mmOfWtnhpyh3+CnKHX6KcoefotxjH77IsU857fBTlDv8FOUOP0W5w09R7vBTlDv8FOUOP0W5w09R7vBTlDv8FOUOP0W5x25abL19Skqp5fs54e09F/blIhf2Jc/FbnqRC/tykQv7cpEL+3KRC/tykQv7cpEL+3KRg32J3fQiB/sSu+lFDvYldtOLHOxL7KYXOdiX2E0vcrAvsZte5GBfYje9yMG+xG56kYN9id30Igf7ErvpRQ72JXbTixzsS+ymFznYl9hNL3KwL7GbXuRgX2I3vcjBvsRuepGDfYnd9CIH+xK76UUO9iV204sc7Evsphc52JfYTS9ysC+xm17kYF9iN73Iwb7EbnqRg32J3fQiB/sSu+lFDvYldtOLHOxL7KYXOdiX2E0vcrAvsZte5GBfYje9yMG+xG56kYN9id30Igf7Er+tfZGDfYm99SIH+xK/AX2RY33x2HcvcqwvHvvuRY71xWPfvcixvnjsuxc51hePffciB/sS++5FDvYl9t2LHOxL7LsXOdiX2HcvcrAv0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+u6Avjug7w7ouwP67oC+O6DvDui7A/rugL47oO8O6LsD+u6Avjug7w7ouwP67oC+O6DvDui7A/rugL47oO8O6LsD+u6Avjug7w7ouwP67oC+O6DvDui7A/rugL47oO8O6LsD+u6Avjug7w7ouwP67oC+O6DvDui7A/rugL47oO+Og+/W5u+53qNc3Jc8F/clz8V9+TH3wz/l93vu4Lt5Lu5L/f79bK9XlIv7kufivuS5uC/d3v//9R8+IveHXNyXPBf//PJc/PNLc7F//u2fZfRL7m//zKEoF34/L3Lh9/MiF34/L3Lh/ZfnDs7X+3j/fnp0Hx2cL88devZDbowoF58Ts719pHKZw6Nc3LM8F/dslvL3cwd3y3PxObFe77lVLMrFP788F//81vs/7Xw3J/w6459fnovPidXb91z0cz+4W56L+/Jjbkb9PLhbngv7Uu29Z9U8Ondjd7vIhX25yMXnoFn7nvtVX4KPAEwPlRjpnr5IfMI+fJH4OH74IvHZ/fBFwhvi6YuEd8/TFzncak9eZMa++fRFDjfxsxf5He74GTPr0xf5He74GQPu0xf5He74GdPw0xf5He74GaPzwxeJxfhDFzF7+3Bc++EDvPefF94u8fm7JL3E55tl7e1T56216BKf71V6ic+3Kr3E5zuVXSI27Gcv8dHfQd5yHy37W+6jDX7LffTofssdTuP1er+ZLbqZY+6+yB1akeVifr7IHX5+ae7w80tzh5/fMRdUcv8d/q2T+68v30u53i9y+GE/e5GPNiO4iPv7YTp++PTtfZHf/uL1evuClvXo6/lo47766zmc0v+oryeG5Q+W4v3TiWz4D1/PfL/IAz+E/CJPfGfr29/TzYf9eJHf/uI53n7tnB59PYffLP9hX89Hz9Av/nriV4LzszIm6osc/D0kfiX4Igd/DzmQeJ776O8hb7mP/rbwloN/BjiQeJ6DfYlfCb7Iwb7ErwRf5GBf4kcFFznYl/hRwUUO9iV+JfgiF/el1PKeC/9sGz+ayHPxo4KL3OERWJo7PAJLc/HPL88dHoEdc8E/Seu13p9/2K//OPKhX/z2FR0erv0Dv6KPdu7rv6KPtvnrv6L4XP0HfkWHhzYf+4rGmwjs6/3qjzsf+sVvX9FHz4Sv/4o+etp8/Vf00XPs67+iJ07IZ78i+Hvg4YFRnvvovf3/uXV4rJPn2O+56/DwJcPodXiekucOXU1z7LWTdXiQkecOfUlzh76kuUNfslz82vpF7tCXNAf7cniykOdgX+LX1i9ysC+HZw55Dvbl8HQgzR3IP8/BvhwcP8/BvhwcP8/BvhwcP8/BvsSvrV/kYF8Ozw3yHOzL4blBnoN9OTwKyHOwLweFz3OwL/Fr6xc52Jf4tfWLHOxL/Nr6RQ72JX5t/SIH+3J4YJDnYF8OVp/nYF/i19YvcrAv8WvrFznYl/i19Ysc7Ev8sSQXOdiXwzOIPAf7cngGkedgX+Br+Qu+lr/ga/kLvpa/4Gv56/AMIs/BvhyeQaS5wzOIPAf7cngGkedgXw7PIPIc7MvhGUSeg305PYNIc7Av8TziIgf7cnrmkeZgX07PPNIc7MvpyUSag305KX+ag305zCPyHOzLycPTHOzLyZbTHOzLYWqQ52BfTr6b5lBf2uvku2kO9WXnUF92DvVl51Bfdg71ZedQX3YO9WXnUF92DvaF+e7Owb4w39052BfmuzsH+8J8d+dgX5jv7hzsC/PdnYN9Yb67c7AvzHd3DvaF+e7Owb4w39052BfmuzsH+8J8d+dgX5jv7hzsC/PdnYN9Yb67c7AvzHd3DvaF+e7Owb4w39052BfmuzsH+8J8d+dgX5jv7hzsC/PdnYN9Yb67c7AvzHd3DvaF+e7Owb4w39052BfmuzsH+8J8d+dgX5jT7hz8uZ/e3X5sQbov8dU72H2Jr97B7kvERXj0Ep9fiqeXeGDN299eUbMfPqDqh0s8sead75eo0SWeWPMml/jqNW97Hej60Us8cHdnl3jg7s4u8cDdnV3igbs7u8QDd3d2ia/e6u9LfPVWf1/iq7f6+xJff3efPofpyUt8/d39wKc7pZf4+rv7gU92Si/x9Xf3A5/qlF7i6+/uBz7RKb3El9/d9sCnOaWX+PK72x74JKf0El9+d9vry+9ue+AznNJLfPndbQ98flN6iS+/u+2Bz27KLnF4iPfoJcL7Ik2FVU9TYXutjTcbsP4KbMDiZ28XubBnF7mwPBe5sBF5Ln72dpELT+aLXHjcXuQOXUlzh7akubgv/b3+5v23H029c3Ff8lzclzwX9yXPxX1Jc/Gzt7+X+/nn/wMrzVKN",
      "",
      "",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n\ncontract CoinToss {\n    use dep::aztec::context::Context;\n    use crate::types::bet_note::{BetNote, BetNoteMethods, BET_NOTE_LEN};\n    use crate::types::bet_amount_note::{BetAmountNote, BetAmountNoteMethods, BET_AMOUNT_NOTE_LEN};\n    use crate::types::address_note::{AddressNote, AddressNoteMethods, ADDRESS_NOTE_LEN};\n\n    use dep::aztec::note::{\n        note_getter_options::NoteGetterOptions,\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        note_viewer_options::NoteViewerOptions,\n        utils as note_utils\n    };\n\n    use dep::std::option::Option;\n\n    use dep::aztec::log::emit_encrypted_log;\n    use dep::aztec::oracle::{\n        get_public_key::get_public_key,\n        rand::rand\n    };\n    use dep::aztec::state_vars::{\n        public_state::PublicState,\n        map::Map,\n        set::Set,\n        singleton::Singleton,\n        immutable_singleton::ImmutableSingleton\n    };\n    use dep::aztec::selector::compute_selector;\n\n    use dep::aztec::types::type_serialization::field_serialization::{ FieldSerializationMethods, FIELD_SERIALIZED_LEN};\n    use dep::aztec::types::type_serialization::aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n    use dep::aztec::types::address::AztecAddress;\n\n\n    global BET_AMOUNT_SLOT = 1;\n    global DIVINITY_ADDRESS_SLOT = 2;\n    global PRIVATE_ORACLE_ADDRESS_SLOT = 3;\n    global HOUSE_ADDRESS_SLOT = 4;\n    global BETS_SLOT = 5;\n\n    // TODO: add slow update tree to make the switch from private to public\n    struct Storage {\n        bet_amount: ImmutableSingleton<BetAmountNote, BET_AMOUNT_NOTE_LEN>,\n        divinity: ImmutableSingleton<AddressNote, ADDRESS_NOTE_LEN>,\n        private_oracle: ImmutableSingleton<AddressNote, ADDRESS_NOTE_LEN>,\n        house: ImmutableSingleton<AddressNote, ADDRESS_NOTE_LEN>,\n        bets: Set<BetNote, BET_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                bet_amount: ImmutableSingleton::new(\n                    context,\n                    BET_AMOUNT_SLOT,\n                    BetAmountNoteMethods,\n                ),\n                divinity: ImmutableSingleton::new(\n                    context,\n                    DIVINITY_ADDRESS_SLOT,\n                    AddressNoteMethods,\n                ),\n                private_oracle: ImmutableSingleton::new(\n                    context,\n                    PRIVATE_ORACLE_ADDRESS_SLOT,\n                    AddressNoteMethods,\n                ),\n                house: ImmutableSingleton::new(\n                    context,\n                    HOUSE_ADDRESS_SLOT,\n                    AddressNoteMethods,\n                ),\n                bets: Set::new(context, BETS_SLOT, BetNoteMethods)\n            }\n        }\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    fn constructor(bet_amount: Field, divinity: AztecAddress, private_oracle: AztecAddress, house: AztecAddress) {\n        let mut bet_amount_note = BetAmountNote::new(bet_amount);\n        storage.bet_amount.initialize(&mut bet_amount_note, Option::none(), false);\n\n        let mut divinity_note = AddressNote::new(divinity);\n        storage.divinity.initialize(&mut divinity_note, Option::none(), false);\n\n        let mut private_oracle_note = AddressNote::new(private_oracle);\n        storage.private_oracle.initialize(&mut private_oracle_note, Option::none(), false);\n\n        let mut house_note = AddressNote::new(house);\n        storage.house.initialize(&mut house_note, Option::none(), false);\n    }\n\n    #[aztec(private)]\n    fn create_bet(bet: bool) {\n        let sender = AztecAddress::new(context.msg_sender());\n        let house = storage.house.get_note().address;\n        let address_this = AztecAddress::new(context.this_address()).address;\n\n        let mut user_bet: BetNote = BetNote::new(sender, bet);\n        storage.bets.insert(&mut user_bet, true);\n\n        emit_encrypted_log(\n            &mut context,\n            address_this,\n            BETS_SLOT,\n            get_public_key(house.address),\n            user_bet.serialize(),\n        );\n    }\n\n    // Returns the bet amount\n    unconstrained fn get_bet_amount_unconstrained() -> BetAmountNote {\n        storage.bet_amount.view_note()\n    }\n\n    // Returns the divinity address\n    unconstrained fn get_divinity_unconstrained() -> AddressNote {\n        storage.divinity.view_note()\n    }\n\n    // Returns the private oracle address\n    unconstrained fn get_private_oracle_unconstrained() -> AddressNote {\n        storage.private_oracle.view_note()\n    }\n\n    // Returns the house address\n    unconstrained fn get_house_unconstrained() -> AddressNote {\n        storage.house.view_note()\n    }\n\n    unconstrained fn get_user_bets_unconstrained(user: AztecAddress, start_offset: u32) -> [Option<BetNote>; 10] {\n        // MAX_NOTES_PER_PAGE == 10\n        // https://github.com/AztecProtocol/aztec-packages/blob/2d498b352364debf59af940f0a69c453651a4ad0/yarn-project/aztec-nr/aztec/src/constants_gen.nr#L53\n\n        // create the filter - limiting to 10 for future compatibility\n        let user_bets_getter_option = NoteViewerOptions::new().select(0, user.address).set_offset(start_offset);\n\n        // filter the notes and return the answer-\n        storage.bets.view_notes(user_bets_getter_option)\n    }\n\n    // Computes note hash and nullifier.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; BET_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n\n        if(storage_slot == BET_AMOUNT_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(BetAmountNoteMethods, note_header, preimage)\n        } else if(storage_slot == BETS_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(BetNoteMethods, note_header, preimage)\n        }\n         else {\n            note_utils::compute_note_hash_and_nullifier(AddressNoteMethods, note_header, preimage)\n        }\n    }\n}",
        "path": "/Users/ngng/code/ng/aztec-coin-toss/src/main.nr"
      },
      "3": {
        "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n",
        "path": "std/hash.nr"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/aztec/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "45": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/aztec/note/lifecycle.nr"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/aztec/note/note_getter.nr"
      },
      "48": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    serialized_note: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "61": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/aztec/oracle/rand.nr"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/aztec/oracle/notes.nr"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/aztec/oracle/logs.nr"
      },
      "71": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "74": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    } else {\n        pedersen_hash(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/aztec/types/vec.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/aztec/utils.nr"
      },
      "87": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress,\n    }\n};\n\nstruct BetNote {\n    owner: AztecAddress,\n    randomness: Field,\n    bet: bool, // Heads is 0 (False). Tails is 1 (True).\n    header: NoteHeader\n}\n\nglobal BET_NOTE_LEN: Field = 3;\n\nimpl BetNote {\n    pub fn new(_owner: AztecAddress, _bet: bool) -> Self {\n        BetNote {\n            owner: _owner,\n            randomness: rand(),\n            bet: _bet,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; BET_NOTE_LEN] {\n        [self.owner.address, self.randomness, self.bet as Field]\n    }\n\n    fn deserialize(preimage: [Field; BET_NOTE_LEN]) -> Self {\n        BetNote {\n            owner: AztecAddress::new(preimage[0]),\n            randomness: preimage[1],\n            bet: preimage[2] as bool,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.owner.address,\n            self.randomness,\n            self.bet as Field\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n        self.randomness\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner.address);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; BET_NOTE_LEN]) -> BetNote {\n    BetNote::deserialize(preimage)\n}\n\nfn serialize(note: BetNote) -> [Field; BET_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BetNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BetNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BetNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BetNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BetNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BetNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/ngng/code/ng/aztec-coin-toss/src/types/bet_note.nr"
      },
      "88": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress\n    }\n};\n\nstruct BetAmountNote {\n    amount: Field,\n    header: NoteHeader\n}\n\nglobal BET_AMOUNT_NOTE_LEN: Field = 1;\n\nimpl BetAmountNote {\n    pub fn new(_amount: Field) -> Self {\n        BetAmountNote {\n            amount: _amount,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; BET_AMOUNT_NOTE_LEN] {\n        [self.amount]\n    }\n\n    fn deserialize(preimage: [Field; BET_AMOUNT_NOTE_LEN]) -> Self {\n        BetAmountNote {\n            amount: preimage[0],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.amount,\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n         let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n         0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        // no owner == no broadcast\n        let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n        let __ = context;\n        let ___ = slot;\n    }\n}\n\nfn deserialize(preimage: [Field; BET_AMOUNT_NOTE_LEN]) -> BetAmountNote {\n    BetAmountNote::deserialize(preimage)\n}\n\nfn serialize(note: BetAmountNote) -> [Field; BET_AMOUNT_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BetAmountNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BetAmountNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BetAmountNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BetAmountNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BetAmountNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BetAmountNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/ngng/code/ng/aztec-coin-toss/src/types/bet_amount_note.nr"
      },
      "89": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key\n    },\n\n    log::emit_encrypted_log,\n    context::PrivateContext,\n    types::{\n        address::AztecAddress\n    }\n};\n\nstruct AddressNote {\n    address: AztecAddress,\n    header: NoteHeader\n}\n\nglobal ADDRESS_NOTE_LEN: Field = 1;\n\nimpl AddressNote {\n    pub fn new(_address: AztecAddress) -> Self {\n        AddressNote {\n            address: _address,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialize(self) -> [Field; ADDRESS_NOTE_LEN] {\n        [self.address.address]\n    }\n\n    fn deserialize(preimage: [Field; ADDRESS_NOTE_LEN]) -> Self {\n        AddressNote {\n            address: AztecAddress::new(preimage[0]),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen_hash([\n            self.address.address,\n        ])\n    }\n\n    fn compute_nullifier(self) -> Field {\n         let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n         0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        // no owner == no broadcast\n        let _ = self; // Avoid compiler warning (same # acir opcodes and backend size)\n        let __ = context;\n        let ___ = slot;\n    }\n}\n\nfn deserialize(preimage: [Field; ADDRESS_NOTE_LEN]) -> AddressNote {\n    AddressNote::deserialize(preimage)\n}\n\nfn serialize(note: AddressNote) -> [Field; ADDRESS_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: AddressNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: AddressNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: AddressNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut AddressNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: AddressNote) {\n    note.broadcast(context, slot);\n}\n\nglobal AddressNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/ngng/code/ng/aztec-coin-toss/src/types/address_note.nr"
      }
    }
  }
}